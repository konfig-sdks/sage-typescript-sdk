/* tslint:disable */
/* eslint-disable */
/*
Sage HR API

All requests are required to be sent to your subdomain. To learn how to enable API in your Sage HR account, please visit https://support.sage.hr/en/articles/3246469-how-does-cakehr-api-work

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { RecruitmentCreateApplicantWithReferral422Response } from '../models';
// @ts-ignore
import { RecruitmentCreateApplicantWithReferralRequest } from '../models';
// @ts-ignore
import { RecruitmentCreateApplicantWithReferralResponse } from '../models';
// @ts-ignore
import { RecruitmentGetApplicantDetailsResponse } from '../models';
// @ts-ignore
import { RecruitmentGetPositionDetailsResponse } from '../models';
// @ts-ignore
import { RecruitmentListApplicantActionsResponse } from '../models';
// @ts-ignore
import { RecruitmentListApplicantsResponse } from '../models';
// @ts-ignore
import { RecruitmentListPositionsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * RecruitmentApi - axios parameter creator
 * @export
 */
export const RecruitmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Tracking applicant\'s source:  * if left blank, source will be automatically set to `api`  * set source to a special keyword (`company_marketing`, `recruiters`, `referral`, `sourced`) to have it mapped to corresponding values   * set source to a desired reference to create a custom source, e.g. `source=linkedin` will create a custom source called linkedin if it does not exist already  * passing a referral object as a parameter will set the source to `referral`    Example of creating an applicant with a refferal object: ``` curl -X POST -H \'X-AUTH-TOKEN:***\' -H \'Content-Type:application/json\' \\   \"https://_***_/api/recruitment/positions/2/applicants\" \\   -d \'{\"applicant\": \\           {\"referral\": {\"email\": \"recruitment@example.com\", \"full_name\": \"Alice L\"}, \\            \"address\": \"BD23 8UL\", \"summary\":\"An applicant\", \\            \"first_name\": \"Applicant Name\"}}\' ``` 
         * @summary Create new applicant
         * @param {number} id Numeric ID of position (must not be closed or completed).
         * @param {string} applicantFirstName 
         * @param {string} [sendThankYouEmail] \\\&#39;true\\\&#39; to send thank you email to applicant
         * @param {string} [applicantLastName] 
         * @param {string} [applicantEmail] 
         * @param {string} [applicantReferral] 
         * @param {string} [applicantPhoneNumber] 
         * @param {string} [applicantSource] 
         * @param {string} [applicantAddress] 
         * @param {string} [applicantSummary] 
         * @param {Uint8Array | File | buffer.File} [applicantAttachment] The file to upload.
         * @param {RecruitmentCreateApplicantWithReferralRequest} [recruitmentCreateApplicantWithReferralRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApplicantWithReferral: async (id: number, applicantFirstName: string, sendThankYouEmail?: string, applicantLastName?: string, applicantEmail?: string, applicantReferral?: string, applicantPhoneNumber?: string, applicantSource?: string, applicantAddress?: string, applicantSummary?: string, applicantAttachment?: Uint8Array | File | buffer.File, recruitmentCreateApplicantWithReferralRequest?: RecruitmentCreateApplicantWithReferralRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createApplicantWithReferral', 'id', id)
            // verify required parameter 'applicantFirstName' is not null or undefined
            assertParamExists('createApplicantWithReferral', 'applicantFirstName', applicantFirstName)
            const localVarPath = `/recruitment/positions/{id}/applicants`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Auth-Token", keyParamName: "apiKey", configuration })

            if (sendThankYouEmail !== undefined) {
                await addFormParam('send_thank_you_email', sendThankYouEmail, false, true)
            }
    
            if (applicantFirstName !== undefined) {
                await addFormParam('applicant[first_name]', applicantFirstName, false, true)
            }
    
            if (applicantLastName !== undefined) {
                await addFormParam('applicant[last_name]', applicantLastName, false, true)
            }
    
            if (applicantEmail !== undefined) {
                await addFormParam('applicant[email]', applicantEmail, false, true)
            }
    
            if (applicantReferral !== undefined) {
                await addFormParam('applicant[referral]', applicantReferral, false, true)
            }
    
            if (applicantPhoneNumber !== undefined) {
                await addFormParam('applicant[phone_number]', applicantPhoneNumber, false, true)
            }
    
            if (applicantSource !== undefined) {
                await addFormParam('applicant[source]', applicantSource, false, true)
            }
    
            if (applicantAddress !== undefined) {
                await addFormParam('applicant[address]', applicantAddress, false, true)
            }
    
            if (applicantSummary !== undefined) {
                await addFormParam('applicant[summary]', applicantSummary, false, true)
            }
    
            if (applicantAttachment !== undefined) {
                await addFormParam('applicant[attachment]', applicantAttachment, true, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: recruitmentCreateApplicantWithReferralRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recruitment/positions/{id}/applicants',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Applicant details
         * @param {number} id Numeric ID of applicant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicantDetails: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApplicantDetails', 'id', id)
            const localVarPath = `/recruitment/applicants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Auth-Token", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recruitment/applicants/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Position details
         * @param {number} id Numeric ID of position
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPositionDetails: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPositionDetails', 'id', id)
            const localVarPath = `/recruitment/positions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Auth-Token", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recruitment/positions/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List applicant\'s process throught the recruitment pipeline. Newest, first. 
         * @summary Applicant actions
         * @param {number} id Numeric ID of applicant
         * @param {number} [page] Pagination: fetch page at given offset
         * @param {number} [perPage] Pagination: amount of actions to return in 1 call, default: 30, max: 100 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplicantActions: async (id: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listApplicantActions', 'id', id)
            const localVarPath = `/recruitment/applicants/{id}/actions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Auth-Token", keyParamName: "apiKey", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recruitment/applicants/{id}/actions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List applicants
         * @param {number} id Numeric ID of position
         * @param {number} [stageId] Optional filter by stage e.g. &#x60;?stage_id&#x3D;25&#x60;
         * @param {number} [page] Pagination: fetch page at given offset, default 1
         * @param {number} [perPage] Pagination: amount of applicants to return in 1 call, default: 30, max: 100 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplicants: async (id: number, stageId?: number, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listApplicants', 'id', id)
            const localVarPath = `/recruitment/positions/{id}/applicants`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Auth-Token", keyParamName: "apiKey", configuration })
            if (stageId !== undefined) {
                localVarQueryParameter['stage_id'] = stageId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recruitment/positions/{id}/applicants',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Posible recruitment position statuses: `draft`, `published`, `internal`, `completed`, `cancelled` 
         * @summary List recruitment positions
         * @param {string} [status] Filter by status, see list of possible statuses &#x60;?status&#x3D;open&#x60; 
         * @param {Array<string>} [hiringManagerIds] Filter by hiring manager id, can appear multiple times &#x60;hiring_manager_ids[]&#x3D;251&amp;hiring_manager_ids[]&#x3D;121&#x60; 
         * @param {Array<string>} [groupIds] Filter by group id, can appear multiple times &#x60;group_ids[]&#x3D;27&amp;group_ids[]&#x3D;761&#x60; 
         * @param {Array<string>} [locationIds] Filter by location id, can appear multiple times &#x60;location_ids[]&#x3D;1&amp;location_ids[]&#x3D;12&#x60; 
         * @param {number} [page] Pagination: fetch page at given offset
         * @param {number} [perPage] Pagination: amount of positions to return in 1 call, default: 30, max: 100 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPositions: async (status?: string, hiringManagerIds?: Array<string>, groupIds?: Array<string>, locationIds?: Array<string>, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recruitment/positions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Auth-Token", keyParamName: "apiKey", configuration })
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (hiringManagerIds) {
                localVarQueryParameter['hiring_manager_ids'] = hiringManagerIds.join(COLLECTION_FORMATS.csv);
            }

            if (groupIds) {
                localVarQueryParameter['group_ids'] = groupIds.join(COLLECTION_FORMATS.csv);
            }

            if (locationIds) {
                localVarQueryParameter['location_ids'] = locationIds.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recruitment/positions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecruitmentApi - functional programming interface
 * @export
 */
export const RecruitmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecruitmentApiAxiosParamCreator(configuration)
    return {
        /**
         * Tracking applicant\'s source:  * if left blank, source will be automatically set to `api`  * set source to a special keyword (`company_marketing`, `recruiters`, `referral`, `sourced`) to have it mapped to corresponding values   * set source to a desired reference to create a custom source, e.g. `source=linkedin` will create a custom source called linkedin if it does not exist already  * passing a referral object as a parameter will set the source to `referral`    Example of creating an applicant with a refferal object: ``` curl -X POST -H \'X-AUTH-TOKEN:***\' -H \'Content-Type:application/json\' \\   \"https://_***_/api/recruitment/positions/2/applicants\" \\   -d \'{\"applicant\": \\           {\"referral\": {\"email\": \"recruitment@example.com\", \"full_name\": \"Alice L\"}, \\            \"address\": \"BD23 8UL\", \"summary\":\"An applicant\", \\            \"first_name\": \"Applicant Name\"}}\' ``` 
         * @summary Create new applicant
         * @param {RecruitmentApiCreateApplicantWithReferralRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApplicantWithReferral(requestParameters: RecruitmentApiCreateApplicantWithReferralRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecruitmentCreateApplicantWithReferralResponse>> {
            const recruitmentCreateApplicantWithReferralRequest: RecruitmentCreateApplicantWithReferralRequest = {
                send_thank_you_email: requestParameters.send_thank_you_email,
                applicant[first_name]: requestParameters.applicant[first_name],
                applicant[last_name]: requestParameters.applicant[last_name],
                applicant[email]: requestParameters.applicant[email],
                applicant[referral]: requestParameters.applicant[referral],
                applicant[phone_number]: requestParameters.applicant[phone_number],
                applicant[source]: requestParameters.applicant[source],
                applicant[address]: requestParameters.applicant[address],
                applicant[summary]: requestParameters.applicant[summary],
                applicant[attachment]: requestParameters.applicant[attachment]
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApplicantWithReferral(requestParameters.id, requestParameters.applicantFirstName, requestParameters.sendThankYouEmail, requestParameters.applicantLastName, requestParameters.applicantEmail, requestParameters.applicantReferral, requestParameters.applicantPhoneNumber, requestParameters.applicantSource, requestParameters.applicantAddress, requestParameters.applicantSummary, requestParameters.applicantAttachment, recruitmentCreateApplicantWithReferralRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Applicant details
         * @param {RecruitmentApiGetApplicantDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApplicantDetails(requestParameters: RecruitmentApiGetApplicantDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecruitmentGetApplicantDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApplicantDetails(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Position details
         * @param {RecruitmentApiGetPositionDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPositionDetails(requestParameters: RecruitmentApiGetPositionDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecruitmentGetPositionDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPositionDetails(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List applicant\'s process throught the recruitment pipeline. Newest, first. 
         * @summary Applicant actions
         * @param {RecruitmentApiListApplicantActionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApplicantActions(requestParameters: RecruitmentApiListApplicantActionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecruitmentListApplicantActionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listApplicantActions(requestParameters.id, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List applicants
         * @param {RecruitmentApiListApplicantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApplicants(requestParameters: RecruitmentApiListApplicantsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecruitmentListApplicantsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listApplicants(requestParameters.id, requestParameters.stageId, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Posible recruitment position statuses: `draft`, `published`, `internal`, `completed`, `cancelled` 
         * @summary List recruitment positions
         * @param {RecruitmentApiListPositionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPositions(requestParameters: RecruitmentApiListPositionsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecruitmentListPositionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPositions(requestParameters.status, requestParameters.hiringManagerIds, requestParameters.groupIds, requestParameters.locationIds, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RecruitmentApi - factory interface
 * @export
 */
export const RecruitmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecruitmentApiFp(configuration)
    return {
        /**
         * Tracking applicant\'s source:  * if left blank, source will be automatically set to `api`  * set source to a special keyword (`company_marketing`, `recruiters`, `referral`, `sourced`) to have it mapped to corresponding values   * set source to a desired reference to create a custom source, e.g. `source=linkedin` will create a custom source called linkedin if it does not exist already  * passing a referral object as a parameter will set the source to `referral`    Example of creating an applicant with a refferal object: ``` curl -X POST -H \'X-AUTH-TOKEN:***\' -H \'Content-Type:application/json\' \\   \"https://_***_/api/recruitment/positions/2/applicants\" \\   -d \'{\"applicant\": \\           {\"referral\": {\"email\": \"recruitment@example.com\", \"full_name\": \"Alice L\"}, \\            \"address\": \"BD23 8UL\", \"summary\":\"An applicant\", \\            \"first_name\": \"Applicant Name\"}}\' ``` 
         * @summary Create new applicant
         * @param {RecruitmentApiCreateApplicantWithReferralRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApplicantWithReferral(requestParameters: RecruitmentApiCreateApplicantWithReferralRequest, options?: AxiosRequestConfig): AxiosPromise<RecruitmentCreateApplicantWithReferralResponse> {
            return localVarFp.createApplicantWithReferral(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Applicant details
         * @param {RecruitmentApiGetApplicantDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicantDetails(requestParameters: RecruitmentApiGetApplicantDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<RecruitmentGetApplicantDetailsResponse> {
            return localVarFp.getApplicantDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Position details
         * @param {RecruitmentApiGetPositionDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPositionDetails(requestParameters: RecruitmentApiGetPositionDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<RecruitmentGetPositionDetailsResponse> {
            return localVarFp.getPositionDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List applicant\'s process throught the recruitment pipeline. Newest, first. 
         * @summary Applicant actions
         * @param {RecruitmentApiListApplicantActionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplicantActions(requestParameters: RecruitmentApiListApplicantActionsRequest, options?: AxiosRequestConfig): AxiosPromise<RecruitmentListApplicantActionsResponse> {
            return localVarFp.listApplicantActions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List applicants
         * @param {RecruitmentApiListApplicantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplicants(requestParameters: RecruitmentApiListApplicantsRequest, options?: AxiosRequestConfig): AxiosPromise<RecruitmentListApplicantsResponse> {
            return localVarFp.listApplicants(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Posible recruitment position statuses: `draft`, `published`, `internal`, `completed`, `cancelled` 
         * @summary List recruitment positions
         * @param {RecruitmentApiListPositionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPositions(requestParameters: RecruitmentApiListPositionsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<RecruitmentListPositionsResponse> {
            return localVarFp.listPositions(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createApplicantWithReferral operation in RecruitmentApi.
 * @export
 * @interface RecruitmentApiCreateApplicantWithReferralRequest
 */
export type RecruitmentApiCreateApplicantWithReferralRequest = {
    
    /**
    * Numeric ID of position (must not be closed or completed).
    * @type {number}
    * @memberof RecruitmentApiCreateApplicantWithReferral
    */
    readonly id: number
    
    /**
    * 
    * @type {string}
    * @memberof RecruitmentApiCreateApplicantWithReferral
    */
    readonly applicantFirstName: string
    
    /**
    * \\\'true\\\' to send thank you email to applicant
    * @type {string}
    * @memberof RecruitmentApiCreateApplicantWithReferral
    */
    readonly sendThankYouEmail?: string
    
    /**
    * 
    * @type {string}
    * @memberof RecruitmentApiCreateApplicantWithReferral
    */
    readonly applicantLastName?: string
    
    /**
    * 
    * @type {string}
    * @memberof RecruitmentApiCreateApplicantWithReferral
    */
    readonly applicantEmail?: string
    
    /**
    * 
    * @type {string}
    * @memberof RecruitmentApiCreateApplicantWithReferral
    */
    readonly applicantReferral?: string
    
    /**
    * 
    * @type {string}
    * @memberof RecruitmentApiCreateApplicantWithReferral
    */
    readonly applicantPhoneNumber?: string
    
    /**
    * 
    * @type {string}
    * @memberof RecruitmentApiCreateApplicantWithReferral
    */
    readonly applicantSource?: string
    
    /**
    * 
    * @type {string}
    * @memberof RecruitmentApiCreateApplicantWithReferral
    */
    readonly applicantAddress?: string
    
    /**
    * 
    * @type {string}
    * @memberof RecruitmentApiCreateApplicantWithReferral
    */
    readonly applicantSummary?: string
    
    /**
    * The file to upload.
    * @type {Uint8Array | File | buffer.File}
    * @memberof RecruitmentApiCreateApplicantWithReferral
    */
    readonly applicantAttachment?: Uint8Array | File | buffer.File
    
} & RecruitmentCreateApplicantWithReferralRequest

/**
 * Request parameters for getApplicantDetails operation in RecruitmentApi.
 * @export
 * @interface RecruitmentApiGetApplicantDetailsRequest
 */
export type RecruitmentApiGetApplicantDetailsRequest = {
    
    /**
    * Numeric ID of applicant
    * @type {number}
    * @memberof RecruitmentApiGetApplicantDetails
    */
    readonly id: number
    
}

/**
 * Request parameters for getPositionDetails operation in RecruitmentApi.
 * @export
 * @interface RecruitmentApiGetPositionDetailsRequest
 */
export type RecruitmentApiGetPositionDetailsRequest = {
    
    /**
    * Numeric ID of position
    * @type {number}
    * @memberof RecruitmentApiGetPositionDetails
    */
    readonly id: number
    
}

/**
 * Request parameters for listApplicantActions operation in RecruitmentApi.
 * @export
 * @interface RecruitmentApiListApplicantActionsRequest
 */
export type RecruitmentApiListApplicantActionsRequest = {
    
    /**
    * Numeric ID of applicant
    * @type {number}
    * @memberof RecruitmentApiListApplicantActions
    */
    readonly id: number
    
    /**
    * Pagination: fetch page at given offset
    * @type {number}
    * @memberof RecruitmentApiListApplicantActions
    */
    readonly page?: number
    
    /**
    * Pagination: amount of actions to return in 1 call, default: 30, max: 100 
    * @type {number}
    * @memberof RecruitmentApiListApplicantActions
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for listApplicants operation in RecruitmentApi.
 * @export
 * @interface RecruitmentApiListApplicantsRequest
 */
export type RecruitmentApiListApplicantsRequest = {
    
    /**
    * Numeric ID of position
    * @type {number}
    * @memberof RecruitmentApiListApplicants
    */
    readonly id: number
    
    /**
    * Optional filter by stage e.g. `?stage_id=25`
    * @type {number}
    * @memberof RecruitmentApiListApplicants
    */
    readonly stageId?: number
    
    /**
    * Pagination: fetch page at given offset, default 1
    * @type {number}
    * @memberof RecruitmentApiListApplicants
    */
    readonly page?: number
    
    /**
    * Pagination: amount of applicants to return in 1 call, default: 30, max: 100 
    * @type {number}
    * @memberof RecruitmentApiListApplicants
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for listPositions operation in RecruitmentApi.
 * @export
 * @interface RecruitmentApiListPositionsRequest
 */
export type RecruitmentApiListPositionsRequest = {
    
    /**
    * Filter by status, see list of possible statuses `?status=open` 
    * @type {string}
    * @memberof RecruitmentApiListPositions
    */
    readonly status?: string
    
    /**
    * Filter by hiring manager id, can appear multiple times `hiring_manager_ids[]=251&hiring_manager_ids[]=121` 
    * @type {Array<string>}
    * @memberof RecruitmentApiListPositions
    */
    readonly hiringManagerIds?: Array<string>
    
    /**
    * Filter by group id, can appear multiple times `group_ids[]=27&group_ids[]=761` 
    * @type {Array<string>}
    * @memberof RecruitmentApiListPositions
    */
    readonly groupIds?: Array<string>
    
    /**
    * Filter by location id, can appear multiple times `location_ids[]=1&location_ids[]=12` 
    * @type {Array<string>}
    * @memberof RecruitmentApiListPositions
    */
    readonly locationIds?: Array<string>
    
    /**
    * Pagination: fetch page at given offset
    * @type {number}
    * @memberof RecruitmentApiListPositions
    */
    readonly page?: number
    
    /**
    * Pagination: amount of positions to return in 1 call, default: 30, max: 100 
    * @type {number}
    * @memberof RecruitmentApiListPositions
    */
    readonly perPage?: number
    
}

/**
 * RecruitmentApiGenerated - object-oriented interface
 * @export
 * @class RecruitmentApiGenerated
 * @extends {BaseAPI}
 */
export class RecruitmentApiGenerated extends BaseAPI {
    /**
     * Tracking applicant\'s source:  * if left blank, source will be automatically set to `api`  * set source to a special keyword (`company_marketing`, `recruiters`, `referral`, `sourced`) to have it mapped to corresponding values   * set source to a desired reference to create a custom source, e.g. `source=linkedin` will create a custom source called linkedin if it does not exist already  * passing a referral object as a parameter will set the source to `referral`    Example of creating an applicant with a refferal object: ``` curl -X POST -H \'X-AUTH-TOKEN:***\' -H \'Content-Type:application/json\' \\   \"https://_***_/api/recruitment/positions/2/applicants\" \\   -d \'{\"applicant\": \\           {\"referral\": {\"email\": \"recruitment@example.com\", \"full_name\": \"Alice L\"}, \\            \"address\": \"BD23 8UL\", \"summary\":\"An applicant\", \\            \"first_name\": \"Applicant Name\"}}\' ``` 
     * @summary Create new applicant
     * @param {RecruitmentApiCreateApplicantWithReferralRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecruitmentApiGenerated
     */
    public createApplicantWithReferral(requestParameters: RecruitmentApiCreateApplicantWithReferralRequest, options?: AxiosRequestConfig) {
        return RecruitmentApiFp(this.configuration).createApplicantWithReferral(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Applicant details
     * @param {RecruitmentApiGetApplicantDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecruitmentApiGenerated
     */
    public getApplicantDetails(requestParameters: RecruitmentApiGetApplicantDetailsRequest, options?: AxiosRequestConfig) {
        return RecruitmentApiFp(this.configuration).getApplicantDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Position details
     * @param {RecruitmentApiGetPositionDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecruitmentApiGenerated
     */
    public getPositionDetails(requestParameters: RecruitmentApiGetPositionDetailsRequest, options?: AxiosRequestConfig) {
        return RecruitmentApiFp(this.configuration).getPositionDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List applicant\'s process throught the recruitment pipeline. Newest, first. 
     * @summary Applicant actions
     * @param {RecruitmentApiListApplicantActionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecruitmentApiGenerated
     */
    public listApplicantActions(requestParameters: RecruitmentApiListApplicantActionsRequest, options?: AxiosRequestConfig) {
        return RecruitmentApiFp(this.configuration).listApplicantActions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List applicants
     * @param {RecruitmentApiListApplicantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecruitmentApiGenerated
     */
    public listApplicants(requestParameters: RecruitmentApiListApplicantsRequest, options?: AxiosRequestConfig) {
        return RecruitmentApiFp(this.configuration).listApplicants(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Posible recruitment position statuses: `draft`, `published`, `internal`, `completed`, `cancelled` 
     * @summary List recruitment positions
     * @param {RecruitmentApiListPositionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecruitmentApiGenerated
     */
    public listPositions(requestParameters: RecruitmentApiListPositionsRequest = {}, options?: AxiosRequestConfig) {
        return RecruitmentApiFp(this.configuration).listPositions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
