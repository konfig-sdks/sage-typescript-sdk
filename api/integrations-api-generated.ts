/* tslint:disable */
/* eslint-disable */
/*
Sage HR API

All requests are required to be sent to your subdomain. To learn how to enable API in your Sage HR account, please visit https://support.sage.hr/en/articles/3246469-how-does-cakehr-api-work

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { IntegrationsImportNewStartersListResponse } from '../models';
// @ts-ignore
import { IntegrationsSendBonusesToVikarinaResponse } from '../models';
// @ts-ignore
import { IntegrationsTransferAppointmentInfoResponse } from '../models';
// @ts-ignore
import { IntegrationsTransferBankAccountInfoResponse } from '../models';
// @ts-ignore
import { IntegrationsTransferContractInformationToVikarinaResponse } from '../models';
// @ts-ignore
import { IntegrationsTransferJobPositionFromSageToVikarinaResponse } from '../models';
// @ts-ignore
import { IntegrationsTransferLeaveInformationToVikarinaResponse } from '../models';
// @ts-ignore
import { IntegrationsTransferOrganizationalStructureFromSageToVikarinaResponse } from '../models';
// @ts-ignore
import { IntegrationsTransferSalaryInformationResponse } from '../models';
// @ts-ignore
import { IntegrationsTransferTerminationInfoToVikarinaResponse } from '../models';
// @ts-ignore
import { IntegrationsTransferTimeScheduleInformationResponse } from '../models';
// @ts-ignore
import { IntegrationsTransferUnusedVacationDaysToVikarinaResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * IntegrationsApi - axios parameter creator
 * @export
 */
export const IntegrationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary New starters list from Sage HR to Vikarina
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importNewStartersList: async (startDate?: string, endDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vikarina/newstarter-employees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vikarina/newstarter-employees',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sending bonuses [payed once] to Vikarina
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendBonusesToVikarina: async (startDate?: string, endDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vikarina/bonuses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vikarina/bonuses',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary New appointment (position changes) information transfer from Sage HR to Vikarina
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferAppointmentInfo: async (startDate?: string, endDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vikarina/appointments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vikarina/appointments',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bank account information transfer (Custom field) from Sage HR to Vikarina
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferBankAccountInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vikarina/bank-accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vikarina/bank-accounts',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Contract (custom field) information transfer from Sage HR to Vikarina
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferContractInformationToVikarina: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vikarina/contract-information`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vikarina/contract-information',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Job position transfer from Sage HR to Vikarina
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferJobPositionFromSageToVikarina: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vikarina/job-positions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vikarina/job-positions',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Leaves information transfer from Sage HR to Vikarina
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferLeaveInformationToVikarina: async (startDate?: string, endDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vikarina/leave-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vikarina/leave-types',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Organizational structure transfer from Sage HR to Vikarina
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOrganizationalStructureFromSageToVikarina: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vikarina/organization-structure`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vikarina/organization-structure',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Salary information transfer from Sage HR to Vikarina to Vikarina
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferSalaryInformation: async (startDate?: string, endDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vikarina/salaries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vikarina/salaries',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Termination information transfer from Sage HR to Vikarina
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferTerminationInfoToVikarina: async (startDate?: string, endDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vikarina/terminated-employees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vikarina/terminated-employees',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Time Schedule information transfer from Sage HR to Vikarina
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferTimeScheduleInformation: async (startDate?: string, endDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vikarina/timesheets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vikarina/timesheets',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unused vacation days transfer from Sage HR to Vikarina
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferUnusedVacationDaysToVikarina: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vikarina/unused-days`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vikarina/unused-days',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IntegrationsApi - functional programming interface
 * @export
 */
export const IntegrationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IntegrationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary New starters list from Sage HR to Vikarina
         * @param {IntegrationsApiImportNewStartersListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importNewStartersList(requestParameters: IntegrationsApiImportNewStartersListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationsImportNewStartersListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importNewStartersList(requestParameters.startDate, requestParameters.endDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sending bonuses [payed once] to Vikarina
         * @param {IntegrationsApiSendBonusesToVikarinaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendBonusesToVikarina(requestParameters: IntegrationsApiSendBonusesToVikarinaRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationsSendBonusesToVikarinaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendBonusesToVikarina(requestParameters.startDate, requestParameters.endDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary New appointment (position changes) information transfer from Sage HR to Vikarina
         * @param {IntegrationsApiTransferAppointmentInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferAppointmentInfo(requestParameters: IntegrationsApiTransferAppointmentInfoRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationsTransferAppointmentInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferAppointmentInfo(requestParameters.startDate, requestParameters.endDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bank account information transfer (Custom field) from Sage HR to Vikarina
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferBankAccountInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationsTransferBankAccountInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferBankAccountInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Contract (custom field) information transfer from Sage HR to Vikarina
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferContractInformationToVikarina(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationsTransferContractInformationToVikarinaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferContractInformationToVikarina(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Job position transfer from Sage HR to Vikarina
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferJobPositionFromSageToVikarina(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationsTransferJobPositionFromSageToVikarinaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferJobPositionFromSageToVikarina(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Leaves information transfer from Sage HR to Vikarina
         * @param {IntegrationsApiTransferLeaveInformationToVikarinaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferLeaveInformationToVikarina(requestParameters: IntegrationsApiTransferLeaveInformationToVikarinaRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationsTransferLeaveInformationToVikarinaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferLeaveInformationToVikarina(requestParameters.startDate, requestParameters.endDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Organizational structure transfer from Sage HR to Vikarina
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferOrganizationalStructureFromSageToVikarina(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationsTransferOrganizationalStructureFromSageToVikarinaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferOrganizationalStructureFromSageToVikarina(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Salary information transfer from Sage HR to Vikarina to Vikarina
         * @param {IntegrationsApiTransferSalaryInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferSalaryInformation(requestParameters: IntegrationsApiTransferSalaryInformationRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationsTransferSalaryInformationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferSalaryInformation(requestParameters.startDate, requestParameters.endDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Termination information transfer from Sage HR to Vikarina
         * @param {IntegrationsApiTransferTerminationInfoToVikarinaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferTerminationInfoToVikarina(requestParameters: IntegrationsApiTransferTerminationInfoToVikarinaRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationsTransferTerminationInfoToVikarinaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferTerminationInfoToVikarina(requestParameters.startDate, requestParameters.endDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Time Schedule information transfer from Sage HR to Vikarina
         * @param {IntegrationsApiTransferTimeScheduleInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferTimeScheduleInformation(requestParameters: IntegrationsApiTransferTimeScheduleInformationRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationsTransferTimeScheduleInformationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferTimeScheduleInformation(requestParameters.startDate, requestParameters.endDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Unused vacation days transfer from Sage HR to Vikarina
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferUnusedVacationDaysToVikarina(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationsTransferUnusedVacationDaysToVikarinaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferUnusedVacationDaysToVikarina(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IntegrationsApi - factory interface
 * @export
 */
export const IntegrationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IntegrationsApiFp(configuration)
    return {
        /**
         * 
         * @summary New starters list from Sage HR to Vikarina
         * @param {IntegrationsApiImportNewStartersListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importNewStartersList(requestParameters: IntegrationsApiImportNewStartersListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<IntegrationsImportNewStartersListResponse> {
            return localVarFp.importNewStartersList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sending bonuses [payed once] to Vikarina
         * @param {IntegrationsApiSendBonusesToVikarinaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendBonusesToVikarina(requestParameters: IntegrationsApiSendBonusesToVikarinaRequest = {}, options?: AxiosRequestConfig): AxiosPromise<IntegrationsSendBonusesToVikarinaResponse> {
            return localVarFp.sendBonusesToVikarina(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary New appointment (position changes) information transfer from Sage HR to Vikarina
         * @param {IntegrationsApiTransferAppointmentInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferAppointmentInfo(requestParameters: IntegrationsApiTransferAppointmentInfoRequest = {}, options?: AxiosRequestConfig): AxiosPromise<IntegrationsTransferAppointmentInfoResponse> {
            return localVarFp.transferAppointmentInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bank account information transfer (Custom field) from Sage HR to Vikarina
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferBankAccountInfo(options?: AxiosRequestConfig): AxiosPromise<IntegrationsTransferBankAccountInfoResponse> {
            return localVarFp.transferBankAccountInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Contract (custom field) information transfer from Sage HR to Vikarina
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferContractInformationToVikarina(options?: AxiosRequestConfig): AxiosPromise<IntegrationsTransferContractInformationToVikarinaResponse> {
            return localVarFp.transferContractInformationToVikarina(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Job position transfer from Sage HR to Vikarina
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferJobPositionFromSageToVikarina(options?: AxiosRequestConfig): AxiosPromise<IntegrationsTransferJobPositionFromSageToVikarinaResponse> {
            return localVarFp.transferJobPositionFromSageToVikarina(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Leaves information transfer from Sage HR to Vikarina
         * @param {IntegrationsApiTransferLeaveInformationToVikarinaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferLeaveInformationToVikarina(requestParameters: IntegrationsApiTransferLeaveInformationToVikarinaRequest = {}, options?: AxiosRequestConfig): AxiosPromise<IntegrationsTransferLeaveInformationToVikarinaResponse> {
            return localVarFp.transferLeaveInformationToVikarina(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Organizational structure transfer from Sage HR to Vikarina
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOrganizationalStructureFromSageToVikarina(options?: AxiosRequestConfig): AxiosPromise<IntegrationsTransferOrganizationalStructureFromSageToVikarinaResponse> {
            return localVarFp.transferOrganizationalStructureFromSageToVikarina(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Salary information transfer from Sage HR to Vikarina to Vikarina
         * @param {IntegrationsApiTransferSalaryInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferSalaryInformation(requestParameters: IntegrationsApiTransferSalaryInformationRequest = {}, options?: AxiosRequestConfig): AxiosPromise<IntegrationsTransferSalaryInformationResponse> {
            return localVarFp.transferSalaryInformation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Termination information transfer from Sage HR to Vikarina
         * @param {IntegrationsApiTransferTerminationInfoToVikarinaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferTerminationInfoToVikarina(requestParameters: IntegrationsApiTransferTerminationInfoToVikarinaRequest = {}, options?: AxiosRequestConfig): AxiosPromise<IntegrationsTransferTerminationInfoToVikarinaResponse> {
            return localVarFp.transferTerminationInfoToVikarina(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Time Schedule information transfer from Sage HR to Vikarina
         * @param {IntegrationsApiTransferTimeScheduleInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferTimeScheduleInformation(requestParameters: IntegrationsApiTransferTimeScheduleInformationRequest = {}, options?: AxiosRequestConfig): AxiosPromise<IntegrationsTransferTimeScheduleInformationResponse> {
            return localVarFp.transferTimeScheduleInformation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Unused vacation days transfer from Sage HR to Vikarina
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferUnusedVacationDaysToVikarina(options?: AxiosRequestConfig): AxiosPromise<IntegrationsTransferUnusedVacationDaysToVikarinaResponse> {
            return localVarFp.transferUnusedVacationDaysToVikarina(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for importNewStartersList operation in IntegrationsApi.
 * @export
 * @interface IntegrationsApiImportNewStartersListRequest
 */
export type IntegrationsApiImportNewStartersListRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof IntegrationsApiImportNewStartersList
    */
    readonly startDate?: string
    
    /**
    * 
    * @type {string}
    * @memberof IntegrationsApiImportNewStartersList
    */
    readonly endDate?: string
    
}

/**
 * Request parameters for sendBonusesToVikarina operation in IntegrationsApi.
 * @export
 * @interface IntegrationsApiSendBonusesToVikarinaRequest
 */
export type IntegrationsApiSendBonusesToVikarinaRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof IntegrationsApiSendBonusesToVikarina
    */
    readonly startDate?: string
    
    /**
    * 
    * @type {string}
    * @memberof IntegrationsApiSendBonusesToVikarina
    */
    readonly endDate?: string
    
}

/**
 * Request parameters for transferAppointmentInfo operation in IntegrationsApi.
 * @export
 * @interface IntegrationsApiTransferAppointmentInfoRequest
 */
export type IntegrationsApiTransferAppointmentInfoRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof IntegrationsApiTransferAppointmentInfo
    */
    readonly startDate?: string
    
    /**
    * 
    * @type {string}
    * @memberof IntegrationsApiTransferAppointmentInfo
    */
    readonly endDate?: string
    
}

/**
 * Request parameters for transferLeaveInformationToVikarina operation in IntegrationsApi.
 * @export
 * @interface IntegrationsApiTransferLeaveInformationToVikarinaRequest
 */
export type IntegrationsApiTransferLeaveInformationToVikarinaRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof IntegrationsApiTransferLeaveInformationToVikarina
    */
    readonly startDate?: string
    
    /**
    * 
    * @type {string}
    * @memberof IntegrationsApiTransferLeaveInformationToVikarina
    */
    readonly endDate?: string
    
}

/**
 * Request parameters for transferSalaryInformation operation in IntegrationsApi.
 * @export
 * @interface IntegrationsApiTransferSalaryInformationRequest
 */
export type IntegrationsApiTransferSalaryInformationRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof IntegrationsApiTransferSalaryInformation
    */
    readonly startDate?: string
    
    /**
    * 
    * @type {string}
    * @memberof IntegrationsApiTransferSalaryInformation
    */
    readonly endDate?: string
    
}

/**
 * Request parameters for transferTerminationInfoToVikarina operation in IntegrationsApi.
 * @export
 * @interface IntegrationsApiTransferTerminationInfoToVikarinaRequest
 */
export type IntegrationsApiTransferTerminationInfoToVikarinaRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof IntegrationsApiTransferTerminationInfoToVikarina
    */
    readonly startDate?: string
    
    /**
    * 
    * @type {string}
    * @memberof IntegrationsApiTransferTerminationInfoToVikarina
    */
    readonly endDate?: string
    
}

/**
 * Request parameters for transferTimeScheduleInformation operation in IntegrationsApi.
 * @export
 * @interface IntegrationsApiTransferTimeScheduleInformationRequest
 */
export type IntegrationsApiTransferTimeScheduleInformationRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof IntegrationsApiTransferTimeScheduleInformation
    */
    readonly startDate?: string
    
    /**
    * 
    * @type {string}
    * @memberof IntegrationsApiTransferTimeScheduleInformation
    */
    readonly endDate?: string
    
}

/**
 * IntegrationsApiGenerated - object-oriented interface
 * @export
 * @class IntegrationsApiGenerated
 * @extends {BaseAPI}
 */
export class IntegrationsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary New starters list from Sage HR to Vikarina
     * @param {IntegrationsApiImportNewStartersListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApiGenerated
     */
    public importNewStartersList(requestParameters: IntegrationsApiImportNewStartersListRequest = {}, options?: AxiosRequestConfig) {
        return IntegrationsApiFp(this.configuration).importNewStartersList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sending bonuses [payed once] to Vikarina
     * @param {IntegrationsApiSendBonusesToVikarinaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApiGenerated
     */
    public sendBonusesToVikarina(requestParameters: IntegrationsApiSendBonusesToVikarinaRequest = {}, options?: AxiosRequestConfig) {
        return IntegrationsApiFp(this.configuration).sendBonusesToVikarina(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary New appointment (position changes) information transfer from Sage HR to Vikarina
     * @param {IntegrationsApiTransferAppointmentInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApiGenerated
     */
    public transferAppointmentInfo(requestParameters: IntegrationsApiTransferAppointmentInfoRequest = {}, options?: AxiosRequestConfig) {
        return IntegrationsApiFp(this.configuration).transferAppointmentInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bank account information transfer (Custom field) from Sage HR to Vikarina
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApiGenerated
     */
    public transferBankAccountInfo(options?: AxiosRequestConfig) {
        return IntegrationsApiFp(this.configuration).transferBankAccountInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Contract (custom field) information transfer from Sage HR to Vikarina
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApiGenerated
     */
    public transferContractInformationToVikarina(options?: AxiosRequestConfig) {
        return IntegrationsApiFp(this.configuration).transferContractInformationToVikarina(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Job position transfer from Sage HR to Vikarina
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApiGenerated
     */
    public transferJobPositionFromSageToVikarina(options?: AxiosRequestConfig) {
        return IntegrationsApiFp(this.configuration).transferJobPositionFromSageToVikarina(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Leaves information transfer from Sage HR to Vikarina
     * @param {IntegrationsApiTransferLeaveInformationToVikarinaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApiGenerated
     */
    public transferLeaveInformationToVikarina(requestParameters: IntegrationsApiTransferLeaveInformationToVikarinaRequest = {}, options?: AxiosRequestConfig) {
        return IntegrationsApiFp(this.configuration).transferLeaveInformationToVikarina(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Organizational structure transfer from Sage HR to Vikarina
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApiGenerated
     */
    public transferOrganizationalStructureFromSageToVikarina(options?: AxiosRequestConfig) {
        return IntegrationsApiFp(this.configuration).transferOrganizationalStructureFromSageToVikarina(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Salary information transfer from Sage HR to Vikarina to Vikarina
     * @param {IntegrationsApiTransferSalaryInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApiGenerated
     */
    public transferSalaryInformation(requestParameters: IntegrationsApiTransferSalaryInformationRequest = {}, options?: AxiosRequestConfig) {
        return IntegrationsApiFp(this.configuration).transferSalaryInformation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Termination information transfer from Sage HR to Vikarina
     * @param {IntegrationsApiTransferTerminationInfoToVikarinaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApiGenerated
     */
    public transferTerminationInfoToVikarina(requestParameters: IntegrationsApiTransferTerminationInfoToVikarinaRequest = {}, options?: AxiosRequestConfig) {
        return IntegrationsApiFp(this.configuration).transferTerminationInfoToVikarina(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Time Schedule information transfer from Sage HR to Vikarina
     * @param {IntegrationsApiTransferTimeScheduleInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApiGenerated
     */
    public transferTimeScheduleInformation(requestParameters: IntegrationsApiTransferTimeScheduleInformationRequest = {}, options?: AxiosRequestConfig) {
        return IntegrationsApiFp(this.configuration).transferTimeScheduleInformation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Unused vacation days transfer from Sage HR to Vikarina
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApiGenerated
     */
    public transferUnusedVacationDaysToVikarina(options?: AxiosRequestConfig) {
        return IntegrationsApiFp(this.configuration).transferUnusedVacationDaysToVikarina(options).then((request) => request(this.axios, this.basePath));
    }
}
