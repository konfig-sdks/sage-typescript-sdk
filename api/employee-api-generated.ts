/* tslint:disable */
/* eslint-disable */
/*
Sage HR API

All requests are required to be sent to your subdomain. To learn how to enable API in your Sage HR account, please visit https://support.sage.hr/en/articles/3246469-how-does-cakehr-api-work

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EmployeeCreateNewEmployeeRequest } from '../models';
// @ts-ignore
import { EmployeeCreateNewEmployeeResponse } from '../models';
// @ts-ignore
import { EmployeeGetByIdResponse } from '../models';
// @ts-ignore
import { EmployeeGetCompensationsResponse } from '../models';
// @ts-ignore
import { EmployeeGetCustomFieldsResponse } from '../models';
// @ts-ignore
import { EmployeeGetTerminatedEmployeeResponse } from '../models';
// @ts-ignore
import { EmployeeListActiveEmployeesResponse } from '../models';
// @ts-ignore
import { EmployeeListTerminatedEmployeesResponse } from '../models';
// @ts-ignore
import { EmployeeTerminateEmployeeRequest } from '../models';
// @ts-ignore
import { EmployeeTerminateEmployeeResponse } from '../models';
// @ts-ignore
import { EmployeeUpdateById404Response } from '../models';
// @ts-ignore
import { EmployeeUpdateByIdRequest } from '../models';
// @ts-ignore
import { EmployeeUpdateByIdResponse } from '../models';
// @ts-ignore
import { EmployeeUpdateCustomField422Response } from '../models';
// @ts-ignore
import { EmployeeUpdateCustomFieldRequest } from '../models';
// @ts-ignore
import { EmployeeUpdateCustomFieldResponse } from '../models';
// @ts-ignore
import { LeaveManagementGetTimeOffBalancesResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmployeeApi - axios parameter creator
 * @export
 */
export const EmployeeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new employee
         * @param {string} email Employees email
         * @param {string} firstName Employees first name
         * @param {string} lastName Employees last name
         * @param {EmployeeCreateNewEmployeeRequest} employeeCreateNewEmployeeRequest 
         * @param {string} [workStartDate] Employees work start date, format: YYYY-MM-DD, leave empty to use todays date
         * @param {string} [sendEmail] \\\&#39;true\\\&#39; to send welcome email to employee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewEmployee: async (email: string, firstName: string, lastName: string, employeeCreateNewEmployeeRequest: EmployeeCreateNewEmployeeRequest, workStartDate?: string, sendEmail?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('createNewEmployee', 'email', email)
            // verify required parameter 'firstName' is not null or undefined
            assertParamExists('createNewEmployee', 'firstName', firstName)
            // verify required parameter 'lastName' is not null or undefined
            assertParamExists('createNewEmployee', 'lastName', lastName)
            // verify required parameter 'employeeCreateNewEmployeeRequest' is not null or undefined
            assertParamExists('createNewEmployee', 'employeeCreateNewEmployeeRequest', employeeCreateNewEmployeeRequest)
            const localVarPath = `/employees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


            if (email !== undefined) {
                await addFormParam('email', email, false, true)
            }
    
            if (firstName !== undefined) {
                await addFormParam('first_name', firstName, false, true)
            }
    
            if (lastName !== undefined) {
                await addFormParam('last_name', lastName, false, true)
            }
    
            if (workStartDate !== undefined) {
                await addFormParam('work_start_date', workStartDate, false, true)
            }
    
            if (sendEmail !== undefined) {
                await addFormParam('send_email', sendEmail, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeCreateNewEmployeeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employees',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeCreateNewEmployeeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Single active employee in company
         * @param {number} id Numeric ID of the user to get.
         * @param {boolean} [teamHistory] 
         * @param {boolean} [employmentStatusHistory] 
         * @param {boolean} [positionHistory] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: number, teamHistory?: boolean, employmentStatusHistory?: boolean, positionHistory?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/employees/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Auth-Token", keyParamName: "apiKey", configuration })
            if (teamHistory !== undefined) {
                localVarQueryParameter['team_history'] = teamHistory;
            }

            if (employmentStatusHistory !== undefined) {
                localVarQueryParameter['employment_status_history'] = employmentStatusHistory;
            }

            if (positionHistory !== undefined) {
                localVarQueryParameter['position_history'] = positionHistory;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employees/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Employee compensations
         * @param {number} id Numeric ID of the user to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompensations: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCompensations', 'id', id)
            const localVarPath = `/employees/{id}/compensations`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Auth-Token", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employees/{id}/compensations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Employee custom fields
         * @param {number} id Numeric ID of the user to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomFields: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCustomFields', 'id', id)
            const localVarPath = `/employees/{id}/custom-fields`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Auth-Token", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employees/{id}/custom-fields',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Single terminated employee in company
         * @param {number} id Numeric ID of the user to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTerminatedEmployee: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTerminatedEmployee', 'id', id)
            const localVarPath = `/terminated-employees/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Auth-Token", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/terminated-employees/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Employee time off balances
         * @param {number} id Numeric ID of the user to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeOffBalances: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTimeOffBalances', 'id', id)
            const localVarPath = `/employees/{id}/leave-management/balances`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Auth-Token", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employees/{id}/leave-management/balances',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List active employees in company
         * @param {number} [page] 
         * @param {boolean} [teamHistory] 
         * @param {boolean} [employmentStatusHistory] 
         * @param {boolean} [positionHistory] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActiveEmployees: async (page?: number, teamHistory?: boolean, employmentStatusHistory?: boolean, positionHistory?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/employees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Auth-Token", keyParamName: "apiKey", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (teamHistory !== undefined) {
                localVarQueryParameter['team_history'] = teamHistory;
            }

            if (employmentStatusHistory !== undefined) {
                localVarQueryParameter['employment_status_history'] = employmentStatusHistory;
            }

            if (positionHistory !== undefined) {
                localVarQueryParameter['position_history'] = positionHistory;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employees',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List terminated employees in company
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTerminatedEmployees: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/terminated-employees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Auth-Token", keyParamName: "apiKey", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/terminated-employees',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Terminate employee
         * @param {number} id Numeric ID of the user
         * @param {string} date Last working day; format: YYYY-MM-DD
         * @param {number} terminationReasonId Termination reason ID
         * @param {EmployeeTerminateEmployeeRequest} employeeTerminateEmployeeRequest 
         * @param {string} [comments] Comments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateEmployee: async (id: number, date: string, terminationReasonId: number, employeeTerminateEmployeeRequest: EmployeeTerminateEmployeeRequest, comments?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('terminateEmployee', 'id', id)
            // verify required parameter 'date' is not null or undefined
            assertParamExists('terminateEmployee', 'date', date)
            // verify required parameter 'terminationReasonId' is not null or undefined
            assertParamExists('terminateEmployee', 'terminationReasonId', terminationReasonId)
            // verify required parameter 'employeeTerminateEmployeeRequest' is not null or undefined
            assertParamExists('terminateEmployee', 'employeeTerminateEmployeeRequest', employeeTerminateEmployeeRequest)
            const localVarPath = `/employees/{id}/terminations`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Auth-Token", keyParamName: "apiKey", configuration })

            if (date !== undefined) {
                await addFormParam('date', date, false, true)
            }
    
            if (terminationReasonId !== undefined) {
                await addFormParam('termination_reason_id', terminationReasonId, false, true)
            }
    
            if (comments !== undefined) {
                await addFormParam('comments', comments, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeTerminateEmployeeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employees/{id}/terminations',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeTerminateEmployeeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Employee
         * @param {number} id Numeric ID of the user to update.
         * @param {EmployeeUpdateByIdRequest} [employeeUpdateByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById: async (id: number, employeeUpdateByIdRequest?: EmployeeUpdateByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateById', 'id', id)
            const localVarPath = `/employees/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeUpdateByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employees/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeUpdateByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update employee custom field
         * @summary Update custom field
         * @param {number} id Employee identifier
         * @param {number} customFieldId Custom field identifier
         * @param {string} value String or array (for tags)
         * @param {EmployeeUpdateCustomFieldRequest} employeeUpdateCustomFieldRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomField: async (id: number, customFieldId: number, value: string, employeeUpdateCustomFieldRequest: EmployeeUpdateCustomFieldRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCustomField', 'id', id)
            // verify required parameter 'customFieldId' is not null or undefined
            assertParamExists('updateCustomField', 'customFieldId', customFieldId)
            // verify required parameter 'value' is not null or undefined
            assertParamExists('updateCustomField', 'value', value)
            // verify required parameter 'employeeUpdateCustomFieldRequest' is not null or undefined
            assertParamExists('updateCustomField', 'employeeUpdateCustomFieldRequest', employeeUpdateCustomFieldRequest)
            const localVarPath = `/employees/{id}/custom-fields/{custom_field_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"custom_field_id"}}`, encodeURIComponent(String(customFieldId !== undefined ? customFieldId : `-custom_field_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


            if (value !== undefined) {
                await addFormParam('value', value, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeUpdateCustomFieldRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employees/{id}/custom-fields/{custom_field_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeUpdateCustomFieldRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeApi - functional programming interface
 * @export
 */
export const EmployeeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create new employee
         * @param {EmployeeApiCreateNewEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewEmployee(requestParameters: EmployeeApiCreateNewEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeCreateNewEmployeeResponse>> {
            const employeeCreateNewEmployeeRequest: EmployeeCreateNewEmployeeRequest = {
                email: requestParameters.email,
                first_name: requestParameters.first_name,
                last_name: requestParameters.last_name,
                work_start_date: requestParameters.work_start_date,
                send_email: requestParameters.send_email
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewEmployee(requestParameters.email, requestParameters.firstName, requestParameters.lastName, employeeCreateNewEmployeeRequest, requestParameters.workStartDate, requestParameters.sendEmail, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Single active employee in company
         * @param {EmployeeApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: EmployeeApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.id, requestParameters.teamHistory, requestParameters.employmentStatusHistory, requestParameters.positionHistory, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Employee compensations
         * @param {EmployeeApiGetCompensationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompensations(requestParameters: EmployeeApiGetCompensationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeGetCompensationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompensations(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Employee custom fields
         * @param {EmployeeApiGetCustomFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomFields(requestParameters: EmployeeApiGetCustomFieldsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeGetCustomFieldsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomFields(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Single terminated employee in company
         * @param {EmployeeApiGetTerminatedEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTerminatedEmployee(requestParameters: EmployeeApiGetTerminatedEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeGetTerminatedEmployeeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTerminatedEmployee(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Employee time off balances
         * @param {EmployeeApiGetTimeOffBalancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTimeOffBalances(requestParameters: EmployeeApiGetTimeOffBalancesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeaveManagementGetTimeOffBalancesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTimeOffBalances(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List active employees in company
         * @param {EmployeeApiListActiveEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listActiveEmployees(requestParameters: EmployeeApiListActiveEmployeesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeListActiveEmployeesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listActiveEmployees(requestParameters.page, requestParameters.teamHistory, requestParameters.employmentStatusHistory, requestParameters.positionHistory, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List terminated employees in company
         * @param {EmployeeApiListTerminatedEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTerminatedEmployees(requestParameters: EmployeeApiListTerminatedEmployeesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeListTerminatedEmployeesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTerminatedEmployees(requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Terminate employee
         * @param {EmployeeApiTerminateEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async terminateEmployee(requestParameters: EmployeeApiTerminateEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeTerminateEmployeeResponse>> {
            const employeeTerminateEmployeeRequest: EmployeeTerminateEmployeeRequest = {
                date: requestParameters.date,
                termination_reason_id: requestParameters.termination_reason_id,
                comments: requestParameters.comments
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.terminateEmployee(requestParameters.id, requestParameters.date, requestParameters.terminationReasonId, employeeTerminateEmployeeRequest, requestParameters.comments, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Employee
         * @param {EmployeeApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateById(requestParameters: EmployeeApiUpdateByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeUpdateByIdResponse>> {
            const employeeUpdateByIdRequest: EmployeeUpdateByIdRequest = {
                first_name: requestParameters.first_name,
                last_name: requestParameters.last_name,
                work_start_date: requestParameters.work_start_date,
                location_id: requestParameters.location_id,
                team_id: requestParameters.team_id,
                leader_id: requestParameters.leader_id,
                position_id: requestParameters.position_id,
                employee_number: requestParameters.employee_number,
                approver_ids: requestParameters.approver_ids,
                selected_leave_types: requestParameters.selected_leave_types
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateById(requestParameters.id, employeeUpdateByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update employee custom field
         * @summary Update custom field
         * @param {EmployeeApiUpdateCustomFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCustomField(requestParameters: EmployeeApiUpdateCustomFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeUpdateCustomFieldResponse>> {
            const employeeUpdateCustomFieldRequest: EmployeeUpdateCustomFieldRequest = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCustomField(requestParameters.id, requestParameters.customFieldId, requestParameters.value, employeeUpdateCustomFieldRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeApi - factory interface
 * @export
 */
export const EmployeeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeApiFp(configuration)
    return {
        /**
         * 
         * @summary Create new employee
         * @param {EmployeeApiCreateNewEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewEmployee(requestParameters: EmployeeApiCreateNewEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeCreateNewEmployeeResponse> {
            return localVarFp.createNewEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Single active employee in company
         * @param {EmployeeApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: EmployeeApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Employee compensations
         * @param {EmployeeApiGetCompensationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompensations(requestParameters: EmployeeApiGetCompensationsRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeGetCompensationsResponse> {
            return localVarFp.getCompensations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Employee custom fields
         * @param {EmployeeApiGetCustomFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomFields(requestParameters: EmployeeApiGetCustomFieldsRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeGetCustomFieldsResponse> {
            return localVarFp.getCustomFields(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Single terminated employee in company
         * @param {EmployeeApiGetTerminatedEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTerminatedEmployee(requestParameters: EmployeeApiGetTerminatedEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeGetTerminatedEmployeeResponse> {
            return localVarFp.getTerminatedEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Employee time off balances
         * @param {EmployeeApiGetTimeOffBalancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeOffBalances(requestParameters: EmployeeApiGetTimeOffBalancesRequest, options?: AxiosRequestConfig): AxiosPromise<LeaveManagementGetTimeOffBalancesResponse> {
            return localVarFp.getTimeOffBalances(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List active employees in company
         * @param {EmployeeApiListActiveEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActiveEmployees(requestParameters: EmployeeApiListActiveEmployeesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<EmployeeListActiveEmployeesResponse> {
            return localVarFp.listActiveEmployees(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List terminated employees in company
         * @param {EmployeeApiListTerminatedEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTerminatedEmployees(requestParameters: EmployeeApiListTerminatedEmployeesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<EmployeeListTerminatedEmployeesResponse> {
            return localVarFp.listTerminatedEmployees(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Terminate employee
         * @param {EmployeeApiTerminateEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateEmployee(requestParameters: EmployeeApiTerminateEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeTerminateEmployeeResponse> {
            return localVarFp.terminateEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Employee
         * @param {EmployeeApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById(requestParameters: EmployeeApiUpdateByIdRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeUpdateByIdResponse> {
            return localVarFp.updateById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update employee custom field
         * @summary Update custom field
         * @param {EmployeeApiUpdateCustomFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomField(requestParameters: EmployeeApiUpdateCustomFieldRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeUpdateCustomFieldResponse> {
            return localVarFp.updateCustomField(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewEmployee operation in EmployeeApi.
 * @export
 * @interface EmployeeApiCreateNewEmployeeRequest
 */
export type EmployeeApiCreateNewEmployeeRequest = {
    
    /**
    * Employees email
    * @type {string}
    * @memberof EmployeeApiCreateNewEmployee
    */
    readonly email: string
    
    /**
    * Employees first name
    * @type {string}
    * @memberof EmployeeApiCreateNewEmployee
    */
    readonly firstName: string
    
    /**
    * Employees last name
    * @type {string}
    * @memberof EmployeeApiCreateNewEmployee
    */
    readonly lastName: string
    
    /**
    * Employees work start date, format: YYYY-MM-DD, leave empty to use todays date
    * @type {string}
    * @memberof EmployeeApiCreateNewEmployee
    */
    readonly workStartDate?: string
    
    /**
    * \\\'true\\\' to send welcome email to employee
    * @type {string}
    * @memberof EmployeeApiCreateNewEmployee
    */
    readonly sendEmail?: string
    
} & EmployeeCreateNewEmployeeRequest

/**
 * Request parameters for getById operation in EmployeeApi.
 * @export
 * @interface EmployeeApiGetByIdRequest
 */
export type EmployeeApiGetByIdRequest = {
    
    /**
    * Numeric ID of the user to get.
    * @type {number}
    * @memberof EmployeeApiGetById
    */
    readonly id: number
    
    /**
    * 
    * @type {boolean}
    * @memberof EmployeeApiGetById
    */
    readonly teamHistory?: boolean
    
    /**
    * 
    * @type {boolean}
    * @memberof EmployeeApiGetById
    */
    readonly employmentStatusHistory?: boolean
    
    /**
    * 
    * @type {boolean}
    * @memberof EmployeeApiGetById
    */
    readonly positionHistory?: boolean
    
}

/**
 * Request parameters for getCompensations operation in EmployeeApi.
 * @export
 * @interface EmployeeApiGetCompensationsRequest
 */
export type EmployeeApiGetCompensationsRequest = {
    
    /**
    * Numeric ID of the user to get.
    * @type {number}
    * @memberof EmployeeApiGetCompensations
    */
    readonly id: number
    
}

/**
 * Request parameters for getCustomFields operation in EmployeeApi.
 * @export
 * @interface EmployeeApiGetCustomFieldsRequest
 */
export type EmployeeApiGetCustomFieldsRequest = {
    
    /**
    * Numeric ID of the user to get.
    * @type {number}
    * @memberof EmployeeApiGetCustomFields
    */
    readonly id: number
    
}

/**
 * Request parameters for getTerminatedEmployee operation in EmployeeApi.
 * @export
 * @interface EmployeeApiGetTerminatedEmployeeRequest
 */
export type EmployeeApiGetTerminatedEmployeeRequest = {
    
    /**
    * Numeric ID of the user to get.
    * @type {number}
    * @memberof EmployeeApiGetTerminatedEmployee
    */
    readonly id: number
    
}

/**
 * Request parameters for getTimeOffBalances operation in EmployeeApi.
 * @export
 * @interface EmployeeApiGetTimeOffBalancesRequest
 */
export type EmployeeApiGetTimeOffBalancesRequest = {
    
    /**
    * Numeric ID of the user to get.
    * @type {number}
    * @memberof EmployeeApiGetTimeOffBalances
    */
    readonly id: number
    
}

/**
 * Request parameters for listActiveEmployees operation in EmployeeApi.
 * @export
 * @interface EmployeeApiListActiveEmployeesRequest
 */
export type EmployeeApiListActiveEmployeesRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof EmployeeApiListActiveEmployees
    */
    readonly page?: number
    
    /**
    * 
    * @type {boolean}
    * @memberof EmployeeApiListActiveEmployees
    */
    readonly teamHistory?: boolean
    
    /**
    * 
    * @type {boolean}
    * @memberof EmployeeApiListActiveEmployees
    */
    readonly employmentStatusHistory?: boolean
    
    /**
    * 
    * @type {boolean}
    * @memberof EmployeeApiListActiveEmployees
    */
    readonly positionHistory?: boolean
    
}

/**
 * Request parameters for listTerminatedEmployees operation in EmployeeApi.
 * @export
 * @interface EmployeeApiListTerminatedEmployeesRequest
 */
export type EmployeeApiListTerminatedEmployeesRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof EmployeeApiListTerminatedEmployees
    */
    readonly page?: number
    
}

/**
 * Request parameters for terminateEmployee operation in EmployeeApi.
 * @export
 * @interface EmployeeApiTerminateEmployeeRequest
 */
export type EmployeeApiTerminateEmployeeRequest = {
    
    /**
    * Numeric ID of the user
    * @type {number}
    * @memberof EmployeeApiTerminateEmployee
    */
    readonly id: number
    
    /**
    * Last working day; format: YYYY-MM-DD
    * @type {string}
    * @memberof EmployeeApiTerminateEmployee
    */
    readonly date: string
    
    /**
    * Termination reason ID
    * @type {number}
    * @memberof EmployeeApiTerminateEmployee
    */
    readonly terminationReasonId: number
    
    /**
    * Comments
    * @type {string}
    * @memberof EmployeeApiTerminateEmployee
    */
    readonly comments?: string
    
} & EmployeeTerminateEmployeeRequest

/**
 * Request parameters for updateById operation in EmployeeApi.
 * @export
 * @interface EmployeeApiUpdateByIdRequest
 */
export type EmployeeApiUpdateByIdRequest = {
    
    /**
    * Numeric ID of the user to update.
    * @type {number}
    * @memberof EmployeeApiUpdateById
    */
    readonly id: number
    
} & EmployeeUpdateByIdRequest

/**
 * Request parameters for updateCustomField operation in EmployeeApi.
 * @export
 * @interface EmployeeApiUpdateCustomFieldRequest
 */
export type EmployeeApiUpdateCustomFieldRequest = {
    
    /**
    * Employee identifier
    * @type {number}
    * @memberof EmployeeApiUpdateCustomField
    */
    readonly id: number
    
    /**
    * Custom field identifier
    * @type {number}
    * @memberof EmployeeApiUpdateCustomField
    */
    readonly customFieldId: number
    
    /**
    * String or array (for tags)
    * @type {string}
    * @memberof EmployeeApiUpdateCustomField
    */
    readonly value: string
    
} & EmployeeUpdateCustomFieldRequest

/**
 * EmployeeApiGenerated - object-oriented interface
 * @export
 * @class EmployeeApiGenerated
 * @extends {BaseAPI}
 */
export class EmployeeApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create new employee
     * @param {EmployeeApiCreateNewEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApiGenerated
     */
    public createNewEmployee(requestParameters: EmployeeApiCreateNewEmployeeRequest, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).createNewEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Single active employee in company
     * @param {EmployeeApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApiGenerated
     */
    public getById(requestParameters: EmployeeApiGetByIdRequest, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Employee compensations
     * @param {EmployeeApiGetCompensationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApiGenerated
     */
    public getCompensations(requestParameters: EmployeeApiGetCompensationsRequest, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).getCompensations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Employee custom fields
     * @param {EmployeeApiGetCustomFieldsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApiGenerated
     */
    public getCustomFields(requestParameters: EmployeeApiGetCustomFieldsRequest, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).getCustomFields(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Single terminated employee in company
     * @param {EmployeeApiGetTerminatedEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApiGenerated
     */
    public getTerminatedEmployee(requestParameters: EmployeeApiGetTerminatedEmployeeRequest, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).getTerminatedEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Employee time off balances
     * @param {EmployeeApiGetTimeOffBalancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApiGenerated
     */
    public getTimeOffBalances(requestParameters: EmployeeApiGetTimeOffBalancesRequest, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).getTimeOffBalances(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List active employees in company
     * @param {EmployeeApiListActiveEmployeesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApiGenerated
     */
    public listActiveEmployees(requestParameters: EmployeeApiListActiveEmployeesRequest = {}, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).listActiveEmployees(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List terminated employees in company
     * @param {EmployeeApiListTerminatedEmployeesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApiGenerated
     */
    public listTerminatedEmployees(requestParameters: EmployeeApiListTerminatedEmployeesRequest = {}, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).listTerminatedEmployees(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Terminate employee
     * @param {EmployeeApiTerminateEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApiGenerated
     */
    public terminateEmployee(requestParameters: EmployeeApiTerminateEmployeeRequest, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).terminateEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Employee
     * @param {EmployeeApiUpdateByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApiGenerated
     */
    public updateById(requestParameters: EmployeeApiUpdateByIdRequest, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).updateById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update employee custom field
     * @summary Update custom field
     * @param {EmployeeApiUpdateCustomFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApiGenerated
     */
    public updateCustomField(requestParameters: EmployeeApiUpdateCustomFieldRequest, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).updateCustomField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
