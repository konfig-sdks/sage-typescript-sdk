/* tslint:disable */
/* eslint-disable */
/*
Sage HR API

All requests are required to be sent to your subdomain. To learn how to enable API in your Sage HR account, please visit https://support.sage.hr/en/articles/3246469-how-does-cakehr-api-work

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LeaveManagementCreateKitDay422Response } from '../models';
// @ts-ignore
import { LeaveManagementCreateKitDayRequest } from '../models';
// @ts-ignore
import { LeaveManagementCreateKitDayResponse } from '../models';
// @ts-ignore
import { LeaveManagementGetIndividualAllowancesResponse } from '../models';
// @ts-ignore
import { LeaveManagementGetKitDaysResponse } from '../models';
// @ts-ignore
import { LeaveManagementGetTimeOffBalancesResponse } from '../models';
// @ts-ignore
import { LeaveManagementGetTimeOffPolicyByIdResponse } from '../models';
// @ts-ignore
import { LeaveManagementListEmployeesOutTodayResponse } from '../models';
// @ts-ignore
import { LeaveManagementListTimeOffPoliciesResponse } from '../models';
// @ts-ignore
import { LeaveManagementListTimeOffRequestsResponse } from '../models';
// @ts-ignore
import { LeaveManagementNewTimeOffRequest422Response } from '../models';
// @ts-ignore
import { LeaveManagementNewTimeOffRequestRequest } from '../models';
// @ts-ignore
import { LeaveManagementNewTimeOffRequestResponse } from '../models';
// @ts-ignore
import { LeaveManagementProcessKitDayRequest } from '../models';
// @ts-ignore
import { LeaveManagementUpdateKitDaysConfigurationRequest } from '../models';
// @ts-ignore
import { LeaveManagementUpdateKitDaysConfigurationResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LeaveManagementApi - axios parameter creator
 * @export
 */
export const LeaveManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a KIT day in a leave
         * @param {number} policyId Time-off policy identifier
         * @param {number} employeeId Employee identifier
         * @param {LeaveManagementCreateKitDayRequest} leaveManagementCreateKitDayRequest 
         * @param {string} [date] Date of single-day KIT day
         * @param {string} [dateFrom] Start date of a multi-day KIT day
         * @param {string} [dateTo] End date of a multi-day KIT day
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKitDay: async (policyId: number, employeeId: number, leaveManagementCreateKitDayRequest: LeaveManagementCreateKitDayRequest, date?: string, dateFrom?: string, dateTo?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('createKitDay', 'policyId', policyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('createKitDay', 'employeeId', employeeId)
            // verify required parameter 'leaveManagementCreateKitDayRequest' is not null or undefined
            assertParamExists('createKitDay', 'leaveManagementCreateKitDayRequest', leaveManagementCreateKitDayRequest)
            const localVarPath = `/leave-management/kit-days`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Auth-Token", keyParamName: "apiKey", configuration })

            if (policyId !== undefined) {
                await addFormParam('policy_id', policyId, false, true)
            }
    
            if (employeeId !== undefined) {
                await addFormParam('employee_id', employeeId, false, true)
            }
    
            if (date !== undefined) {
                await addFormParam('date', date, false, true)
            }
    
            if (dateFrom !== undefined) {
                await addFormParam('date_from', dateFrom, false, true)
            }
    
            if (dateTo !== undefined) {
                await addFormParam('date_to', dateTo, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: leaveManagementCreateKitDayRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/leave-management/kit-days',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(leaveManagementCreateKitDayRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Report with individual allowances
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {Array<number>} [locationIds] Limit the reports to employees in specified location ids
         * @param {Array<number>} [employeeIds] Limit the reports to selected employee ids
         * @param {Array<number>} [teamIds] Limit the reports to employees in specified team ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndividualAllowances: async (page?: number, perPage?: number, locationIds?: Array<number>, employeeIds?: Array<number>, teamIds?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/leave-management/reports/individual-allowances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Auth-Token", keyParamName: "apiKey", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (locationIds) {
                localVarQueryParameter['location_ids'] = locationIds.join(COLLECTION_FORMATS.csv);
            }

            if (employeeIds) {
                localVarQueryParameter['employee_ids'] = employeeIds.join(COLLECTION_FORMATS.csv);
            }

            if (teamIds) {
                localVarQueryParameter['team_ids'] = teamIds.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/leave-management/reports/individual-allowances',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary View all the KIT days of an employee in a policy
         * @param {number} policyId Time-off policy identifier
         * @param {number} employeeId Employee identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKitDays: async (policyId: number, employeeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('getKitDays', 'policyId', policyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getKitDays', 'employeeId', employeeId)
            const localVarPath = `/leave-management/kit-days`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Auth-Token", keyParamName: "apiKey", configuration })
            if (policyId !== undefined) {
                localVarQueryParameter['policy_id'] = policyId;
            }

            if (employeeId !== undefined) {
                localVarQueryParameter['employee_id'] = employeeId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/leave-management/kit-days',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Employee time off balances
         * @param {number} id Numeric ID of the user to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeOffBalances: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTimeOffBalances', 'id', id)
            const localVarPath = `/employees/{id}/leave-management/balances`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Auth-Token", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employees/{id}/leave-management/balances',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Details about a time off policy
         * @param {number} id Numeric ID of the policy to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeOffPolicyById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTimeOffPolicyById', 'id', id)
            const localVarPath = `/leave-management/policies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Auth-Token", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/leave-management/policies/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List employees out of office today
         * @param {string} [date] Optional date, defauls to today
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeesOutToday: async (date?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/leave-management/out-of-office-today`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Auth-Token", keyParamName: "apiKey", configuration })
            if (date !== undefined) {
                localVarQueryParameter['date'] = date;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/leave-management/out-of-office-today',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List time off policies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTimeOffPolicies: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/leave-management/policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Auth-Token", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/leave-management/policies',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List time off requests
         * @param {number} [page] 
         * @param {string} [from] If not specified defaults to beginning of current month
         * @param {string} [to] If not specified defaults to end of current month. Days between from date and to date must be less than 65. If you need info for larger period of time make multiple requests;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTimeOffRequests: async (page?: number, from?: string, to?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/leave-management/requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Auth-Token", keyParamName: "apiKey", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/leave-management/requests',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new time off request
         * @param {string} type 
         * @param {number} timeOffPolicyId 
         * @param {number} employeeId 
         * @param {string} partOfDay required if type is single
         * @param {LeaveManagementNewTimeOffRequestRequest} leaveManagementNewTimeOffRequestRequest 
         * @param {string} [date] format: YYYY-MM-DD; required if type is single
         * @param {string} [dateFrom] format: YYYY-MM-DD; required if type is multi
         * @param {string} [dateTo] format: YYYY-MM-DD; required if type is multi
         * @param {number} [hours] required if type is single &amp; part_of_day is first_part_of_day or second_part_of_day
         * @param {string} [timeFrom] format: H:M; required if part_of_day is specific_timespan
         * @param {string} [timeTo] format: H:M; required if part_of_day is specific_timespan
         * @param {string} [details] required based on policy settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newTimeOffRequest: async (type: string, timeOffPolicyId: number, employeeId: number, partOfDay: string, leaveManagementNewTimeOffRequestRequest: LeaveManagementNewTimeOffRequestRequest, date?: string, dateFrom?: string, dateTo?: string, hours?: number, timeFrom?: string, timeTo?: string, details?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('newTimeOffRequest', 'type', type)
            // verify required parameter 'timeOffPolicyId' is not null or undefined
            assertParamExists('newTimeOffRequest', 'timeOffPolicyId', timeOffPolicyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('newTimeOffRequest', 'employeeId', employeeId)
            // verify required parameter 'partOfDay' is not null or undefined
            assertParamExists('newTimeOffRequest', 'partOfDay', partOfDay)
            // verify required parameter 'leaveManagementNewTimeOffRequestRequest' is not null or undefined
            assertParamExists('newTimeOffRequest', 'leaveManagementNewTimeOffRequestRequest', leaveManagementNewTimeOffRequestRequest)
            const localVarPath = `/leave-management/requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


            if (type !== undefined) {
                await addFormParam('type', type, false, true)
            }
    
            if (timeOffPolicyId !== undefined) {
                await addFormParam('time_off_policy_id', timeOffPolicyId, false, true)
            }
    
            if (employeeId !== undefined) {
                await addFormParam('employee_id', employeeId, false, true)
            }
    
            if (date !== undefined) {
                await addFormParam('date', date, false, true)
            }
    
            if (dateFrom !== undefined) {
                await addFormParam('date_from', dateFrom, false, true)
            }
    
            if (dateTo !== undefined) {
                await addFormParam('date_to', dateTo, false, true)
            }
    
            if (partOfDay !== undefined) {
                await addFormParam('part_of_day', partOfDay, false, true)
            }
    
            if (hours !== undefined) {
                await addFormParam('hours', hours, false, true)
            }
    
            if (timeFrom !== undefined) {
                await addFormParam('time_from', timeFrom, false, true)
            }
    
            if (timeTo !== undefined) {
                await addFormParam('time_to', timeTo, false, true)
            }
    
            if (details !== undefined) {
                await addFormParam('details', details, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: leaveManagementNewTimeOffRequestRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/leave-management/requests',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(leaveManagementNewTimeOffRequestRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Approve, decline or cancel a KIT day
         * @param {number} id KIT day identifier
         * @param {string} status Action to apply to the specified KIT day
         * @param {LeaveManagementProcessKitDayRequest} leaveManagementProcessKitDayRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processKitDay: async (id: number, status: string, leaveManagementProcessKitDayRequest: LeaveManagementProcessKitDayRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('processKitDay', 'id', id)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('processKitDay', 'status', status)
            // verify required parameter 'leaveManagementProcessKitDayRequest' is not null or undefined
            assertParamExists('processKitDay', 'leaveManagementProcessKitDayRequest', leaveManagementProcessKitDayRequest)
            const localVarPath = `/leave-management/kit-days/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Auth-Token", keyParamName: "apiKey", configuration })

            if (status !== undefined) {
                await addFormParam('status', status, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: leaveManagementProcessKitDayRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/leave-management/kit-days/{id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(leaveManagementProcessKitDayRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update KIT days configuration of a time off policy
         * @param {number} id Numeric ID of the policy to get.
         * @param {boolean} kitDaysEnabled Whether the policy allows Kit days or not
         * @param {number} kitDaysQuantity Maximum number of Kit days allowed in the policy
         * @param {LeaveManagementUpdateKitDaysConfigurationRequest} leaveManagementUpdateKitDaysConfigurationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateKitDaysConfiguration: async (id: number, kitDaysEnabled: boolean, kitDaysQuantity: number, leaveManagementUpdateKitDaysConfigurationRequest: LeaveManagementUpdateKitDaysConfigurationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateKitDaysConfiguration', 'id', id)
            // verify required parameter 'kitDaysEnabled' is not null or undefined
            assertParamExists('updateKitDaysConfiguration', 'kitDaysEnabled', kitDaysEnabled)
            // verify required parameter 'kitDaysQuantity' is not null or undefined
            assertParamExists('updateKitDaysConfiguration', 'kitDaysQuantity', kitDaysQuantity)
            // verify required parameter 'leaveManagementUpdateKitDaysConfigurationRequest' is not null or undefined
            assertParamExists('updateKitDaysConfiguration', 'leaveManagementUpdateKitDaysConfigurationRequest', leaveManagementUpdateKitDaysConfigurationRequest)
            const localVarPath = `/leave-management/policies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Auth-Token", keyParamName: "apiKey", configuration })

            if (kitDaysEnabled !== undefined) {
                await addFormParam('kit_days_enabled', kitDaysEnabled, false, true)
            }
    
            if (kitDaysQuantity !== undefined) {
                await addFormParam('kit_days_quantity', kitDaysQuantity, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: leaveManagementUpdateKitDaysConfigurationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/leave-management/policies/{id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(leaveManagementUpdateKitDaysConfigurationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LeaveManagementApi - functional programming interface
 * @export
 */
export const LeaveManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LeaveManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a KIT day in a leave
         * @param {LeaveManagementApiCreateKitDayRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createKitDay(requestParameters: LeaveManagementApiCreateKitDayRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeaveManagementCreateKitDayResponse>> {
            const leaveManagementCreateKitDayRequest: LeaveManagementCreateKitDayRequest = {
                policy_id: requestParameters.policy_id,
                employee_id: requestParameters.employee_id,
                date: requestParameters.date,
                date_from: requestParameters.date_from,
                date_to: requestParameters.date_to
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createKitDay(requestParameters.policyId, requestParameters.employeeId, leaveManagementCreateKitDayRequest, requestParameters.date, requestParameters.dateFrom, requestParameters.dateTo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Report with individual allowances
         * @param {LeaveManagementApiGetIndividualAllowancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIndividualAllowances(requestParameters: LeaveManagementApiGetIndividualAllowancesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeaveManagementGetIndividualAllowancesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIndividualAllowances(requestParameters.page, requestParameters.perPage, requestParameters.locationIds, requestParameters.employeeIds, requestParameters.teamIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary View all the KIT days of an employee in a policy
         * @param {LeaveManagementApiGetKitDaysRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKitDays(requestParameters: LeaveManagementApiGetKitDaysRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeaveManagementGetKitDaysResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getKitDays(requestParameters.policyId, requestParameters.employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Employee time off balances
         * @param {LeaveManagementApiGetTimeOffBalancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTimeOffBalances(requestParameters: LeaveManagementApiGetTimeOffBalancesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeaveManagementGetTimeOffBalancesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTimeOffBalances(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Details about a time off policy
         * @param {LeaveManagementApiGetTimeOffPolicyByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTimeOffPolicyById(requestParameters: LeaveManagementApiGetTimeOffPolicyByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeaveManagementGetTimeOffPolicyByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTimeOffPolicyById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List employees out of office today
         * @param {LeaveManagementApiListEmployeesOutTodayRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEmployeesOutToday(requestParameters: LeaveManagementApiListEmployeesOutTodayRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeaveManagementListEmployeesOutTodayResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEmployeesOutToday(requestParameters.date, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List time off policies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTimeOffPolicies(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeaveManagementListTimeOffPoliciesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTimeOffPolicies(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List time off requests
         * @param {LeaveManagementApiListTimeOffRequestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTimeOffRequests(requestParameters: LeaveManagementApiListTimeOffRequestsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeaveManagementListTimeOffRequestsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTimeOffRequests(requestParameters.page, requestParameters.from, requestParameters.to, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create new time off request
         * @param {LeaveManagementApiNewTimeOffRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newTimeOffRequest(requestParameters: LeaveManagementApiNewTimeOffRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeaveManagementNewTimeOffRequestResponse>> {
            const leaveManagementNewTimeOffRequestRequest: LeaveManagementNewTimeOffRequestRequest = {
                type: requestParameters.type,
                time_off_policy_id: requestParameters.time_off_policy_id,
                employee_id: requestParameters.employee_id,
                date: requestParameters.date,
                date_from: requestParameters.date_from,
                date_to: requestParameters.date_to,
                part_of_day: requestParameters.part_of_day,
                hours: requestParameters.hours,
                time_from: requestParameters.time_from,
                time_to: requestParameters.time_to,
                details: requestParameters.details
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.newTimeOffRequest(requestParameters.type, requestParameters.timeOffPolicyId, requestParameters.employeeId, requestParameters.partOfDay, leaveManagementNewTimeOffRequestRequest, requestParameters.date, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.hours, requestParameters.timeFrom, requestParameters.timeTo, requestParameters.details, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Approve, decline or cancel a KIT day
         * @param {LeaveManagementApiProcessKitDayRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processKitDay(requestParameters: LeaveManagementApiProcessKitDayRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const leaveManagementProcessKitDayRequest: LeaveManagementProcessKitDayRequest = {
                status: requestParameters.status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.processKitDay(requestParameters.id, requestParameters.status, leaveManagementProcessKitDayRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update KIT days configuration of a time off policy
         * @param {LeaveManagementApiUpdateKitDaysConfigurationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateKitDaysConfiguration(requestParameters: LeaveManagementApiUpdateKitDaysConfigurationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const leaveManagementUpdateKitDaysConfigurationRequest: LeaveManagementUpdateKitDaysConfigurationRequest = {
                kit_days_enabled: requestParameters.kit_days_enabled,
                kit_days_quantity: requestParameters.kit_days_quantity
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateKitDaysConfiguration(requestParameters.id, requestParameters.kitDaysEnabled, requestParameters.kitDaysQuantity, leaveManagementUpdateKitDaysConfigurationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LeaveManagementApi - factory interface
 * @export
 */
export const LeaveManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LeaveManagementApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a KIT day in a leave
         * @param {LeaveManagementApiCreateKitDayRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKitDay(requestParameters: LeaveManagementApiCreateKitDayRequest, options?: AxiosRequestConfig): AxiosPromise<LeaveManagementCreateKitDayResponse> {
            return localVarFp.createKitDay(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Report with individual allowances
         * @param {LeaveManagementApiGetIndividualAllowancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndividualAllowances(requestParameters: LeaveManagementApiGetIndividualAllowancesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<LeaveManagementGetIndividualAllowancesResponse> {
            return localVarFp.getIndividualAllowances(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary View all the KIT days of an employee in a policy
         * @param {LeaveManagementApiGetKitDaysRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKitDays(requestParameters: LeaveManagementApiGetKitDaysRequest, options?: AxiosRequestConfig): AxiosPromise<LeaveManagementGetKitDaysResponse> {
            return localVarFp.getKitDays(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Employee time off balances
         * @param {LeaveManagementApiGetTimeOffBalancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeOffBalances(requestParameters: LeaveManagementApiGetTimeOffBalancesRequest, options?: AxiosRequestConfig): AxiosPromise<LeaveManagementGetTimeOffBalancesResponse> {
            return localVarFp.getTimeOffBalances(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Details about a time off policy
         * @param {LeaveManagementApiGetTimeOffPolicyByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeOffPolicyById(requestParameters: LeaveManagementApiGetTimeOffPolicyByIdRequest, options?: AxiosRequestConfig): AxiosPromise<LeaveManagementGetTimeOffPolicyByIdResponse> {
            return localVarFp.getTimeOffPolicyById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List employees out of office today
         * @param {LeaveManagementApiListEmployeesOutTodayRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeesOutToday(requestParameters: LeaveManagementApiListEmployeesOutTodayRequest = {}, options?: AxiosRequestConfig): AxiosPromise<LeaveManagementListEmployeesOutTodayResponse> {
            return localVarFp.listEmployeesOutToday(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List time off policies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTimeOffPolicies(options?: AxiosRequestConfig): AxiosPromise<LeaveManagementListTimeOffPoliciesResponse> {
            return localVarFp.listTimeOffPolicies(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List time off requests
         * @param {LeaveManagementApiListTimeOffRequestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTimeOffRequests(requestParameters: LeaveManagementApiListTimeOffRequestsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<LeaveManagementListTimeOffRequestsResponse> {
            return localVarFp.listTimeOffRequests(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new time off request
         * @param {LeaveManagementApiNewTimeOffRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newTimeOffRequest(requestParameters: LeaveManagementApiNewTimeOffRequestRequest, options?: AxiosRequestConfig): AxiosPromise<LeaveManagementNewTimeOffRequestResponse> {
            return localVarFp.newTimeOffRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Approve, decline or cancel a KIT day
         * @param {LeaveManagementApiProcessKitDayRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processKitDay(requestParameters: LeaveManagementApiProcessKitDayRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.processKitDay(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update KIT days configuration of a time off policy
         * @param {LeaveManagementApiUpdateKitDaysConfigurationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateKitDaysConfiguration(requestParameters: LeaveManagementApiUpdateKitDaysConfigurationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateKitDaysConfiguration(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createKitDay operation in LeaveManagementApi.
 * @export
 * @interface LeaveManagementApiCreateKitDayRequest
 */
export type LeaveManagementApiCreateKitDayRequest = {
    
    /**
    * Time-off policy identifier
    * @type {number}
    * @memberof LeaveManagementApiCreateKitDay
    */
    readonly policyId: number
    
    /**
    * Employee identifier
    * @type {number}
    * @memberof LeaveManagementApiCreateKitDay
    */
    readonly employeeId: number
    
    /**
    * Date of single-day KIT day
    * @type {string}
    * @memberof LeaveManagementApiCreateKitDay
    */
    readonly date?: string
    
    /**
    * Start date of a multi-day KIT day
    * @type {string}
    * @memberof LeaveManagementApiCreateKitDay
    */
    readonly dateFrom?: string
    
    /**
    * End date of a multi-day KIT day
    * @type {string}
    * @memberof LeaveManagementApiCreateKitDay
    */
    readonly dateTo?: string
    
} & LeaveManagementCreateKitDayRequest

/**
 * Request parameters for getIndividualAllowances operation in LeaveManagementApi.
 * @export
 * @interface LeaveManagementApiGetIndividualAllowancesRequest
 */
export type LeaveManagementApiGetIndividualAllowancesRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof LeaveManagementApiGetIndividualAllowances
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof LeaveManagementApiGetIndividualAllowances
    */
    readonly perPage?: number
    
    /**
    * Limit the reports to employees in specified location ids
    * @type {Array<number>}
    * @memberof LeaveManagementApiGetIndividualAllowances
    */
    readonly locationIds?: Array<number>
    
    /**
    * Limit the reports to selected employee ids
    * @type {Array<number>}
    * @memberof LeaveManagementApiGetIndividualAllowances
    */
    readonly employeeIds?: Array<number>
    
    /**
    * Limit the reports to employees in specified team ids
    * @type {Array<number>}
    * @memberof LeaveManagementApiGetIndividualAllowances
    */
    readonly teamIds?: Array<number>
    
}

/**
 * Request parameters for getKitDays operation in LeaveManagementApi.
 * @export
 * @interface LeaveManagementApiGetKitDaysRequest
 */
export type LeaveManagementApiGetKitDaysRequest = {
    
    /**
    * Time-off policy identifier
    * @type {number}
    * @memberof LeaveManagementApiGetKitDays
    */
    readonly policyId: number
    
    /**
    * Employee identifier
    * @type {number}
    * @memberof LeaveManagementApiGetKitDays
    */
    readonly employeeId: number
    
}

/**
 * Request parameters for getTimeOffBalances operation in LeaveManagementApi.
 * @export
 * @interface LeaveManagementApiGetTimeOffBalancesRequest
 */
export type LeaveManagementApiGetTimeOffBalancesRequest = {
    
    /**
    * Numeric ID of the user to get.
    * @type {number}
    * @memberof LeaveManagementApiGetTimeOffBalances
    */
    readonly id: number
    
}

/**
 * Request parameters for getTimeOffPolicyById operation in LeaveManagementApi.
 * @export
 * @interface LeaveManagementApiGetTimeOffPolicyByIdRequest
 */
export type LeaveManagementApiGetTimeOffPolicyByIdRequest = {
    
    /**
    * Numeric ID of the policy to get.
    * @type {number}
    * @memberof LeaveManagementApiGetTimeOffPolicyById
    */
    readonly id: number
    
}

/**
 * Request parameters for listEmployeesOutToday operation in LeaveManagementApi.
 * @export
 * @interface LeaveManagementApiListEmployeesOutTodayRequest
 */
export type LeaveManagementApiListEmployeesOutTodayRequest = {
    
    /**
    * Optional date, defauls to today
    * @type {string}
    * @memberof LeaveManagementApiListEmployeesOutToday
    */
    readonly date?: string
    
}

/**
 * Request parameters for listTimeOffRequests operation in LeaveManagementApi.
 * @export
 * @interface LeaveManagementApiListTimeOffRequestsRequest
 */
export type LeaveManagementApiListTimeOffRequestsRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof LeaveManagementApiListTimeOffRequests
    */
    readonly page?: number
    
    /**
    * If not specified defaults to beginning of current month
    * @type {string}
    * @memberof LeaveManagementApiListTimeOffRequests
    */
    readonly from?: string
    
    /**
    * If not specified defaults to end of current month. Days between from date and to date must be less than 65. If you need info for larger period of time make multiple requests;
    * @type {string}
    * @memberof LeaveManagementApiListTimeOffRequests
    */
    readonly to?: string
    
}

/**
 * Request parameters for newTimeOffRequest operation in LeaveManagementApi.
 * @export
 * @interface LeaveManagementApiNewTimeOffRequestRequest
 */
export type LeaveManagementApiNewTimeOffRequestRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof LeaveManagementApiNewTimeOffRequest
    */
    readonly type: string
    
    /**
    * 
    * @type {number}
    * @memberof LeaveManagementApiNewTimeOffRequest
    */
    readonly timeOffPolicyId: number
    
    /**
    * 
    * @type {number}
    * @memberof LeaveManagementApiNewTimeOffRequest
    */
    readonly employeeId: number
    
    /**
    * required if type is single
    * @type {string}
    * @memberof LeaveManagementApiNewTimeOffRequest
    */
    readonly partOfDay: string
    
    /**
    * format: YYYY-MM-DD; required if type is single
    * @type {string}
    * @memberof LeaveManagementApiNewTimeOffRequest
    */
    readonly date?: string
    
    /**
    * format: YYYY-MM-DD; required if type is multi
    * @type {string}
    * @memberof LeaveManagementApiNewTimeOffRequest
    */
    readonly dateFrom?: string
    
    /**
    * format: YYYY-MM-DD; required if type is multi
    * @type {string}
    * @memberof LeaveManagementApiNewTimeOffRequest
    */
    readonly dateTo?: string
    
    /**
    * required if type is single & part_of_day is first_part_of_day or second_part_of_day
    * @type {number}
    * @memberof LeaveManagementApiNewTimeOffRequest
    */
    readonly hours?: number
    
    /**
    * format: H:M; required if part_of_day is specific_timespan
    * @type {string}
    * @memberof LeaveManagementApiNewTimeOffRequest
    */
    readonly timeFrom?: string
    
    /**
    * format: H:M; required if part_of_day is specific_timespan
    * @type {string}
    * @memberof LeaveManagementApiNewTimeOffRequest
    */
    readonly timeTo?: string
    
    /**
    * required based on policy settings
    * @type {string}
    * @memberof LeaveManagementApiNewTimeOffRequest
    */
    readonly details?: string
    
} & LeaveManagementNewTimeOffRequestRequest

/**
 * Request parameters for processKitDay operation in LeaveManagementApi.
 * @export
 * @interface LeaveManagementApiProcessKitDayRequest
 */
export type LeaveManagementApiProcessKitDayRequest = {
    
    /**
    * KIT day identifier
    * @type {number}
    * @memberof LeaveManagementApiProcessKitDay
    */
    readonly id: number
    
    /**
    * Action to apply to the specified KIT day
    * @type {string}
    * @memberof LeaveManagementApiProcessKitDay
    */
    readonly status: string
    
} & LeaveManagementProcessKitDayRequest

/**
 * Request parameters for updateKitDaysConfiguration operation in LeaveManagementApi.
 * @export
 * @interface LeaveManagementApiUpdateKitDaysConfigurationRequest
 */
export type LeaveManagementApiUpdateKitDaysConfigurationRequest = {
    
    /**
    * Numeric ID of the policy to get.
    * @type {number}
    * @memberof LeaveManagementApiUpdateKitDaysConfiguration
    */
    readonly id: number
    
    /**
    * Whether the policy allows Kit days or not
    * @type {boolean}
    * @memberof LeaveManagementApiUpdateKitDaysConfiguration
    */
    readonly kitDaysEnabled: boolean
    
    /**
    * Maximum number of Kit days allowed in the policy
    * @type {number}
    * @memberof LeaveManagementApiUpdateKitDaysConfiguration
    */
    readonly kitDaysQuantity: number
    
} & LeaveManagementUpdateKitDaysConfigurationRequest

/**
 * LeaveManagementApiGenerated - object-oriented interface
 * @export
 * @class LeaveManagementApiGenerated
 * @extends {BaseAPI}
 */
export class LeaveManagementApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create a KIT day in a leave
     * @param {LeaveManagementApiCreateKitDayRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaveManagementApiGenerated
     */
    public createKitDay(requestParameters: LeaveManagementApiCreateKitDayRequest, options?: AxiosRequestConfig) {
        return LeaveManagementApiFp(this.configuration).createKitDay(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Report with individual allowances
     * @param {LeaveManagementApiGetIndividualAllowancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaveManagementApiGenerated
     */
    public getIndividualAllowances(requestParameters: LeaveManagementApiGetIndividualAllowancesRequest = {}, options?: AxiosRequestConfig) {
        return LeaveManagementApiFp(this.configuration).getIndividualAllowances(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary View all the KIT days of an employee in a policy
     * @param {LeaveManagementApiGetKitDaysRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaveManagementApiGenerated
     */
    public getKitDays(requestParameters: LeaveManagementApiGetKitDaysRequest, options?: AxiosRequestConfig) {
        return LeaveManagementApiFp(this.configuration).getKitDays(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Employee time off balances
     * @param {LeaveManagementApiGetTimeOffBalancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaveManagementApiGenerated
     */
    public getTimeOffBalances(requestParameters: LeaveManagementApiGetTimeOffBalancesRequest, options?: AxiosRequestConfig) {
        return LeaveManagementApiFp(this.configuration).getTimeOffBalances(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Details about a time off policy
     * @param {LeaveManagementApiGetTimeOffPolicyByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaveManagementApiGenerated
     */
    public getTimeOffPolicyById(requestParameters: LeaveManagementApiGetTimeOffPolicyByIdRequest, options?: AxiosRequestConfig) {
        return LeaveManagementApiFp(this.configuration).getTimeOffPolicyById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List employees out of office today
     * @param {LeaveManagementApiListEmployeesOutTodayRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaveManagementApiGenerated
     */
    public listEmployeesOutToday(requestParameters: LeaveManagementApiListEmployeesOutTodayRequest = {}, options?: AxiosRequestConfig) {
        return LeaveManagementApiFp(this.configuration).listEmployeesOutToday(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List time off policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaveManagementApiGenerated
     */
    public listTimeOffPolicies(options?: AxiosRequestConfig) {
        return LeaveManagementApiFp(this.configuration).listTimeOffPolicies(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List time off requests
     * @param {LeaveManagementApiListTimeOffRequestsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaveManagementApiGenerated
     */
    public listTimeOffRequests(requestParameters: LeaveManagementApiListTimeOffRequestsRequest = {}, options?: AxiosRequestConfig) {
        return LeaveManagementApiFp(this.configuration).listTimeOffRequests(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new time off request
     * @param {LeaveManagementApiNewTimeOffRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaveManagementApiGenerated
     */
    public newTimeOffRequest(requestParameters: LeaveManagementApiNewTimeOffRequestRequest, options?: AxiosRequestConfig) {
        return LeaveManagementApiFp(this.configuration).newTimeOffRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Approve, decline or cancel a KIT day
     * @param {LeaveManagementApiProcessKitDayRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaveManagementApiGenerated
     */
    public processKitDay(requestParameters: LeaveManagementApiProcessKitDayRequest, options?: AxiosRequestConfig) {
        return LeaveManagementApiFp(this.configuration).processKitDay(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update KIT days configuration of a time off policy
     * @param {LeaveManagementApiUpdateKitDaysConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaveManagementApiGenerated
     */
    public updateKitDaysConfiguration(requestParameters: LeaveManagementApiUpdateKitDaysConfigurationRequest, options?: AxiosRequestConfig) {
        return LeaveManagementApiFp(this.configuration).updateKitDaysConfiguration(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
