/* tslint:disable */
/* eslint-disable */
/*
Sage HR API

All requests are required to be sent to your subdomain. To learn how to enable API in your Sage HR account, please visit https://support.sage.hr/en/articles/3246469-how-does-cakehr-api-work

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { OffboardingCreateTaskRequest } from '../models';
// @ts-ignore
import { OffboardingCreateTaskResponse } from '../models';
// @ts-ignore
import { OffboardingListCategoriesResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OffboardingApi - axios parameter creator
 * @export
 */
export const OffboardingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new offboarding task
         * @param {string} title 
         * @param {number} boardingTaskTemplateCategoryId 
         * @param {number} dueIn Due date in days before employee last working day
         * @param {OffboardingCreateTaskRequest} offboardingCreateTaskRequest 
         * @param {string} [description] 
         * @param {string} [defaultAssigneeType] Default: self; leader - direct manager; employee - specific employee via assignee_id
         * @param {number} [assigneeId] Specific assignee if default_assignee_type is \\\&#39;employee\\\&#39;
         * @param {string} [requireAttachment] \\\&#39;true\\\&#39; to enabled required attachment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTask: async (title: string, boardingTaskTemplateCategoryId: number, dueIn: number, offboardingCreateTaskRequest: OffboardingCreateTaskRequest, description?: string, defaultAssigneeType?: string, assigneeId?: number, requireAttachment?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'title' is not null or undefined
            assertParamExists('createTask', 'title', title)
            // verify required parameter 'boardingTaskTemplateCategoryId' is not null or undefined
            assertParamExists('createTask', 'boardingTaskTemplateCategoryId', boardingTaskTemplateCategoryId)
            // verify required parameter 'dueIn' is not null or undefined
            assertParamExists('createTask', 'dueIn', dueIn)
            // verify required parameter 'offboardingCreateTaskRequest' is not null or undefined
            assertParamExists('createTask', 'offboardingCreateTaskRequest', offboardingCreateTaskRequest)
            const localVarPath = `/offboarding/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


            if (title !== undefined) {
                await addFormParam('title', title, false, true)
            }
    
            if (description !== undefined) {
                await addFormParam('description', description, false, true)
            }
    
            if (boardingTaskTemplateCategoryId !== undefined) {
                await addFormParam('boarding_task_template_category_id', boardingTaskTemplateCategoryId, false, true)
            }
    
            if (dueIn !== undefined) {
                await addFormParam('due_in', dueIn, false, true)
            }
    
            if (defaultAssigneeType !== undefined) {
                await addFormParam('default_assignee_type', defaultAssigneeType, false, true)
            }
    
            if (assigneeId !== undefined) {
                await addFormParam('assignee_id', assigneeId, false, true)
            }
    
            if (requireAttachment !== undefined) {
                await addFormParam('require_attachment', requireAttachment, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: offboardingCreateTaskRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/offboarding/tasks',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(offboardingCreateTaskRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List offboarding task categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCategories: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/offboarding/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/offboarding/categories',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OffboardingApi - functional programming interface
 * @export
 */
export const OffboardingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OffboardingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create new offboarding task
         * @param {OffboardingApiCreateTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTask(requestParameters: OffboardingApiCreateTaskRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OffboardingCreateTaskResponse>> {
            const offboardingCreateTaskRequest: OffboardingCreateTaskRequest = {
                title: requestParameters.title,
                description: requestParameters.description,
                boarding_task_template_category_id: requestParameters.boarding_task_template_category_id,
                due_in: requestParameters.due_in,
                default_assignee_type: requestParameters.default_assignee_type,
                assignee_id: requestParameters.assignee_id,
                require_attachment: requestParameters.require_attachment
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTask(requestParameters.title, requestParameters.boardingTaskTemplateCategoryId, requestParameters.dueIn, offboardingCreateTaskRequest, requestParameters.description, requestParameters.defaultAssigneeType, requestParameters.assigneeId, requestParameters.requireAttachment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List offboarding task categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCategories(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OffboardingListCategoriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCategories(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OffboardingApi - factory interface
 * @export
 */
export const OffboardingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OffboardingApiFp(configuration)
    return {
        /**
         * 
         * @summary Create new offboarding task
         * @param {OffboardingApiCreateTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTask(requestParameters: OffboardingApiCreateTaskRequest, options?: AxiosRequestConfig): AxiosPromise<OffboardingCreateTaskResponse> {
            return localVarFp.createTask(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List offboarding task categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCategories(options?: AxiosRequestConfig): AxiosPromise<OffboardingListCategoriesResponse> {
            return localVarFp.listCategories(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createTask operation in OffboardingApi.
 * @export
 * @interface OffboardingApiCreateTaskRequest
 */
export type OffboardingApiCreateTaskRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof OffboardingApiCreateTask
    */
    readonly title: string
    
    /**
    * 
    * @type {number}
    * @memberof OffboardingApiCreateTask
    */
    readonly boardingTaskTemplateCategoryId: number
    
    /**
    * Due date in days before employee last working day
    * @type {number}
    * @memberof OffboardingApiCreateTask
    */
    readonly dueIn: number
    
    /**
    * 
    * @type {string}
    * @memberof OffboardingApiCreateTask
    */
    readonly description?: string
    
    /**
    * Default: self; leader - direct manager; employee - specific employee via assignee_id
    * @type {string}
    * @memberof OffboardingApiCreateTask
    */
    readonly defaultAssigneeType?: string
    
    /**
    * Specific assignee if default_assignee_type is \\\'employee\\\'
    * @type {number}
    * @memberof OffboardingApiCreateTask
    */
    readonly assigneeId?: number
    
    /**
    * \\\'true\\\' to enabled required attachment
    * @type {string}
    * @memberof OffboardingApiCreateTask
    */
    readonly requireAttachment?: string
    
} & OffboardingCreateTaskRequest

/**
 * OffboardingApiGenerated - object-oriented interface
 * @export
 * @class OffboardingApiGenerated
 * @extends {BaseAPI}
 */
export class OffboardingApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create new offboarding task
     * @param {OffboardingApiCreateTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffboardingApiGenerated
     */
    public createTask(requestParameters: OffboardingApiCreateTaskRequest, options?: AxiosRequestConfig) {
        return OffboardingApiFp(this.configuration).createTask(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List offboarding task categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffboardingApiGenerated
     */
    public listCategories(options?: AxiosRequestConfig) {
        return OffboardingApiFp(this.configuration).listCategories(options).then((request) => request(this.axios, this.basePath));
    }
}
