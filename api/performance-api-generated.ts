/* tslint:disable */
/* eslint-disable */
/*
Sage HR API

All requests are required to be sent to your subdomain. To learn how to enable API in your Sage HR account, please visit https://support.sage.hr/en/articles/3246469-how-does-cakehr-api-work

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PerformanceGetQuarterlyCompanyGoalsResponse } from '../models';
// @ts-ignore
import { PerformanceGetQuarterlyIndividualGoalsResponse } from '../models';
// @ts-ignore
import { PerformanceGetQuarterlyTeamGoalsResponse } from '../models';
// @ts-ignore
import { PerformanceOverviewQuarterlyProgressResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PerformanceApi - axios parameter creator
 * @export
 */
export const PerformanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Quarterly company goals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuarterlyCompanyGoals: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/performance/goals/quarterly-progress/company-goals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Auth-Token", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/performance/goals/quarterly-progress/company-goals',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Quarterly individual goals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuarterlyIndividualGoals: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/performance/goals/quarterly-progress/individual-goals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Auth-Token", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/performance/goals/quarterly-progress/individual-goals',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Quarterly team goals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuarterlyTeamGoals: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/performance/goals/quarterly-progress/team-goals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Auth-Token", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/performance/goals/quarterly-progress/team-goals',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Overview of quarterly goal progress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        overviewQuarterlyProgress: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/performance/goals/quarterly-progress/overall`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Auth-Token", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/performance/goals/quarterly-progress/overall',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PerformanceApi - functional programming interface
 * @export
 */
export const PerformanceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PerformanceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Quarterly company goals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuarterlyCompanyGoals(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PerformanceGetQuarterlyCompanyGoalsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuarterlyCompanyGoals(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Quarterly individual goals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuarterlyIndividualGoals(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PerformanceGetQuarterlyIndividualGoalsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuarterlyIndividualGoals(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Quarterly team goals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuarterlyTeamGoals(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PerformanceGetQuarterlyTeamGoalsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuarterlyTeamGoals(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Overview of quarterly goal progress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async overviewQuarterlyProgress(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PerformanceOverviewQuarterlyProgressResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.overviewQuarterlyProgress(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PerformanceApi - factory interface
 * @export
 */
export const PerformanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PerformanceApiFp(configuration)
    return {
        /**
         * 
         * @summary Quarterly company goals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuarterlyCompanyGoals(options?: AxiosRequestConfig): AxiosPromise<PerformanceGetQuarterlyCompanyGoalsResponse> {
            return localVarFp.getQuarterlyCompanyGoals(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Quarterly individual goals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuarterlyIndividualGoals(options?: AxiosRequestConfig): AxiosPromise<PerformanceGetQuarterlyIndividualGoalsResponse> {
            return localVarFp.getQuarterlyIndividualGoals(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Quarterly team goals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuarterlyTeamGoals(options?: AxiosRequestConfig): AxiosPromise<PerformanceGetQuarterlyTeamGoalsResponse> {
            return localVarFp.getQuarterlyTeamGoals(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Overview of quarterly goal progress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        overviewQuarterlyProgress(options?: AxiosRequestConfig): AxiosPromise<PerformanceOverviewQuarterlyProgressResponse> {
            return localVarFp.overviewQuarterlyProgress(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PerformanceApiGenerated - object-oriented interface
 * @export
 * @class PerformanceApiGenerated
 * @extends {BaseAPI}
 */
export class PerformanceApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Quarterly company goals
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerformanceApiGenerated
     */
    public getQuarterlyCompanyGoals(options?: AxiosRequestConfig) {
        return PerformanceApiFp(this.configuration).getQuarterlyCompanyGoals(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Quarterly individual goals
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerformanceApiGenerated
     */
    public getQuarterlyIndividualGoals(options?: AxiosRequestConfig) {
        return PerformanceApiFp(this.configuration).getQuarterlyIndividualGoals(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Quarterly team goals
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerformanceApiGenerated
     */
    public getQuarterlyTeamGoals(options?: AxiosRequestConfig) {
        return PerformanceApiFp(this.configuration).getQuarterlyTeamGoals(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Overview of quarterly goal progress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerformanceApiGenerated
     */
    public overviewQuarterlyProgress(options?: AxiosRequestConfig) {
        return PerformanceApiFp(this.configuration).overviewQuarterlyProgress(options).then((request) => request(this.axios, this.basePath));
    }
}
